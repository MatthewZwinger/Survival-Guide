<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_other_bagandtag.xml -->
    <eat-comment/>
    <string-array name="bagandtag_howto">
        <item>fragment_pager_item_no_image</item>
        <item>How to Bag And Other Procedures</item>
        <item>Make sure there aren’t any sharp edges/objects that could puncture the bag&lt;br>&lt;br>
Inspectors will look for any potentially dangerous, sharp edges. If they deem them too sharp, you may be requested to fix it at competition. Save yourself time by doing this beforehand. &lt;br>&lt;br>
Open the bag up wide, then put whatever you wanted to bag in the bag.&lt;br>&lt;br>
Seal the bag with one of the zipties provided at kickoff.&lt;br>&lt;br>
Complete the Robot Lock-Up Form provided on firstinspires.org with an adult mentor&lt;br>&lt;br>
http://www.firstinspires.org/sites/default/files/uploads/resource_library/frc/game-and-season-info/competition-manual/2016/2016robotlockupform-v0.pdf&lt;br>&lt;br>
You will need to update this log every time you open up the bag.&lt;br>&lt;br>
Some teams make the mistake of putting their Lock-Up log in their bagged robot. You likely will not be punished at competition for doing so, but you are not supposed to put your log in the sealed bag.&lt;br>&lt;br>
If the bag is torn at any time, you will need to explain it on the log and likely to the inspector at competition.&lt;br>&lt;br>
At regular competitions, your team is responsible for transporting your robot.&lt;br>&lt;br>
If you qualify for the Championship event, you will receive a voucher for FedEx and must ship your robot by the Thursday following your last competition.&lt;br>&lt;br>
You will need to construct a crate that the robot can be shipped in. Keep the total weight under 400lbs (with a sub-150lb robot it should not be too difficult)&lt;br>&lt;br>
If you are flying to Championships you need to box your batteries because they are not allowed on planes
</item>
        <item/>
    </string-array>
    <string-array name="bagandtag_stop_build">
        <item>fragment_pager_item_no_image</item>
        <item>Stop Build Day</item>
        <item>Stop Build Day is the last day of the official build season. All of your work builds up to this day wheb you meet together and bag your robot. Here are a few things your team should accomplish on the last day of build season:&lt;br>&lt;br>
Address aspects of your robot and create plans to fix them if they break at competition. This may involve forming a plan to make spare parts before competition. &lt;br>&lt;br>
Go over that year’s Inspection Checklist to make sure your robot will pass inspection. &lt;br>&lt;br>
Practice, practice, practice! &lt;br>&lt;br>
Address any last minute problems.&lt;br>&lt;br>

	At the conclusion of last day of the sixth week of build season, you must bag up your competition robot. In your kit of parts you get at kickoff, you receive the necessary materials to do bag and tag your robot.
</item>
        <item/>
    </string-array>
    <string-array name="bagandtag_what_to_bag">
        <item>fragment_pager_item_no_image</item>
        <item>What to Bag</item>
        <item>Your robot:&lt;br>&lt;br>
You are not required to bag your electrical components. Teams under a strict budget could build two robots, one competition and one practice, with one set of electrical components. However, this strategy will cost you time, forcing you to rewire your robot at competition. Some teams have designed “modular” electrical boards that can easily be removed without undoing wiring.&lt;br>&lt;br>
Any non-COTS (Commercial off-the-shelf) products brought to competition, usually in the form of spare parts or mechanisms you worked on after Stop Build Day, outside of the bag will be included in a weight limited “withheld” products. Historically, the withholding limit has been around 30 to 40lbs. Any altered or modified COTs products (i.e. cut metal, which would include spare parts for robots, wheels with holes drilled in them, etc.) are counted in the withholding allowance.&lt;br>&lt;br>
Bumpers: They can be in a different bag, but they have to be bagged in something. If they are in a bag, they too must be labeled.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_cad.xml -->
    <eat-comment/>
    <string-array name="cad_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction</item>
        <item>Computer Aided Design, or CAD for short, is a branch of computer software used to aid the design, manufacturing, modification, analysis, and optimization of a tangible item. CAD has been developed for decades and is an industry standard across the world. The invention of CAD has drastically cut down on development time, manufacturing costs, and overhead in general. The ability to track parts and assemblies on the computer with attached documentation has created a streamlined engineering world where it is now easier than ever to create complex ideas and designs. Here in FRC, CAD software is available teams worldwide and you can be apart of having a streamlined robot that is done faster, costs less, and makes your build season more enjoyable.</item>
        <item> </item>
    </string-array>
    <string-array name="cad_software">
        <item>fragment_pager_item_no_image</item>
        <item>Deciding on a CAD software</item>
        <item>CAD software is offered to all FRC teams world wide. In FRC, you can choose
            from three different software programs to model your robot: PTC Creo Parametric,
            Autodesk Inventor, and Solidworks. All of these softwares will perform the same task.
            The one you select will largely be up to preference. PTC runs a yearly grant for struggling
            teams in need of resources, and one of their eligibility requirements is that your
            team uses their software. If you are an American or Canadian student, your school
            likely already has Autodesk Inventor installed on your computers. Autodesk is a
            sponsor for Project Lead the Way, an industrial technology curriculum with some
            classes offering college credit at the end of the school year, similar to an AP
            class. Your final option is Solidworks. Solidworks is very popular with industries
            such as design and machining, and is very common throughout universities in the United
            States. Depending on who you ask, Solidworks owns either the largest majority of the CAD
            market share, or a large majority of the CAD market share worldwide, so if you’re looking
            to use the same software on your FRC team that you’ll use in and after college, Solidworks
            is a great choice.</item>
        <item> </item>
    </string-array>
    <string-array name="cad_sync">
        <item>fragment_pager_item_no_image</item>
        <item>Keeping All of Your Parts Synced with PDM</item>
        <item>PDM stands for “project data management,” and is used as an industry standard worldwide to keep CAD assemblies up to date and accessible. To keep your CAD models up to date, some solutions are built into your CAD software. Applications such as PTC Windchill and Autodesk 360 are clients that can be applied directly into your CAD software of choice and work on startup while you CAD. However we recommend a 3rd party solution to PDM: GRABCAD Workbench. GRABCAD Workbench allows you to receive online data syncs with a 3D viewer in browser and on any mobile device you choose, and you also utilize the easy installation and local storage while using CAD. Most PDM solutions have a steep learning curve. GRABCAD Workbench is plug and play. It has an intuitive design that allows for ease of access for anyone involved in the project. Having the app installed will even prompt you to download parts edited by others and upload parts edited by you.</item>
        <item> </item>
    </string-array>
    <string-array name="cad_week1">
        <item>fragment_pager_item_no_image</item>
        <item>Week 1: The Field, Your Drivetrain, And Mechanism Designs</item>
        <item>The first week of the build season is the most important week of the build season. It is the week that you decide which tasks your robot will complete, and hopefully how the robot will complete them. There are many things to consider when you’re designing your robot but one constant element is the drivetrain. It is important to design your drivetrain as soon as you can so that you have something to start designing specific mechanisms off of. That is not to say that you should push out a hastily made drivetrain that will hardly last you beyond a single competition. The AndyMark KOP drivetrain CAD model is always available, so if you plan on using that exact model, then you’re already halfway there! Some slight modifications may be needed, but your drivetrain can be modified as needed to play the game.&lt;br>&lt;br>

Another project in the first week of the build season is to make preliminary mockups of different ideas for the main mechanism of your robot, for CAD this means that you need to make basic outlines of the mechanisms as a proof of concept. With most CAD programs you can constrain parts so that they are able to move, the ability to do that will greatly aid in the process when you are deciding what mechanism to go with for the full build season. You can also use sketches to size your robot in two dimensions. For example, in FIRST Stronghold we used sketches to size up how long our hook deployment mechanism needed to be in order to make it to the hanging bar.</item>
        <item> </item>
    </string-array>
    <string-array name="cad_week2">
        <item>fragment_pager_item_no_image</item>
        <item>Weeks 2 and 3: Final Mechanisms, Electrical, and Engineering Drawings</item>
        <item>By the end of the first week you should have your drivetrain and ideas of the mechanisms you want to have on your robot. The prototypes for these designs will be tested in early week 2. Once they have tested and changed prototypes and found ideal mechanisms during the prototyping phase, the CAD department should reconvene with the other technical departments. The departments will push for the prototypes that worked and how they constructed them. For the designs that are ultimately decided upon, your role of making the robot in CAD will begin. Use as much information from your prototypes as possible! They are real world examples of how the game piece will behave on field, and they offer specific information such as how long your arm should be or how fast your intake should spin and with which wheels you tested. By the middle of the second week you should be in full swing of designing specific mechanisms for your robot. At this point you should split up into sub teams that are in charge of a different part of the robot, whether it be finishing touches on your drivetrain, starting your main mechanisms, or laying out your electrical board to avoid future packaging issues. Extra stuff that your robot can go without comes later. It is best to get started on your main mechanism first so you are consistently scoring in at least one way on the field. Delegate your CAD team appropriately and meaningfully.&lt;br>&lt;br>

        It is just as important to fabricate the parts for the mechanisms as it is to design them. The easiest way to illustrate how a part needs to be made is to make an engineering drawing of it. In an engineering drawing you take a part or assembly and annotate important dimensions so that the fabrication team can make it and put it together. As you complete parts, you should be making these drawings and giving them to the machinists to fabricate. This will allow the designers and the fabricators to work simultaneously. Hold off on parts that are subject to change. They can be fabricated later. Nail down what you have to reduce overhead later. If a part changes mid season, you lose the one thing you’ll never get back during build season: time.&lt;br>&lt;br>

            Keep in mind where you\'re going to put the control system. It can be very easy to put off however it is never a good idea to throw the electrical on in the last week of the build season wherever you have space. The best way to go about solving this problem is by planning with the electrical department how many of each module you will need and if there is anywhere that something will need to be.&lt;br>&lt;br>

By the middle to end of week 3, the robot should be fully modeled in CAD. Since the Mechanical department is working alongside you, they should be wrapping up fabrication within a few days after you finish CAD. The robot is in great shape to be completely assembled and ready for testing if you can get everything done by week 3.</item>
        <item> </item>
    </string-array>
    <string-array name="cad_week4">
        <item>fragment_pager_item_no_image</item>
        <item>Weeks 4 5, and 6+: Catch Up and Post Build Season Mechanisms</item>
        <item>During the end of the build season, use the CAD model as much as possible to troubleshoot any fabrication errors that may have occurred so they can be fixed in an orderly manner. There’s nothing wrong with having an issue, as long as it gets fixed. Keep the model up to date with any last second changes. Keep printing engineering drawings for the sake of documentation. Engineering judges at the competition love seeing students interact with CAD software from start to finish, so don’t stop at just the computer.&lt;br>&lt;br>
        Some games demand a lot. Recycle Rush and Stronghold offered many ways to manipulate game pieces and score points. You may not have time to finish all of your mechanisms in 45 days. That’s fine. Use CAD to your advantage as your model should be a carbon copy of what’s in the sealed bag. You will have time at the competition to swap parts and add features thanks to the rules on spare parts and withholding allowance.</item>
        <item> </item>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_compintro.xml -->
    <eat-comment/>
    <string-array name="comp_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to the Competition</item>
        <item>This is it. Six weeks (and possibly more) have prepared you and your robot, and it all comes down to the Competition.
            However, in order to arrive to the tournament feeling more ready than ever, there are a few things you may have to prepare
            for first. Now depending on which competition system your region follows (Regional or District Events), some rules for the
            rankings and qualifying spots are different, but for the most part, ideas stay the same no matter what system your region runs.
            This guide will give you everything you need to know for those, provided you also give the game manual for that year an in-depth
            read. Generally speaking, competitions can be divided into three “main parts,” that are very distinct from one another:\n\n
            Preparation\n\nQualifying Matches\n\nElimination Matches\n\nDuring your 2-3 day competition, each of these stages are equally
            important to your team’s success, and it is critical that you know what to expect going in. Each of these parts have a
            special section devoted to them, with sub-sections highlighting the differences between Regional and District events
            to give an in-depth explanation of everything a team needs to know. Finally, an explanation of competition structure
            and the different levels of competition procession all the way to the World Championships is provided.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_regionals.xml -->
    <eat-comment/>
    <string-array name="comp_prep">
        <item>fragment_pager_item_no_image</item>
        <item>Preparation</item>

        <item>
During your three-day competition, this “preparation” stage generally takes up the entire first day.&lt;br> &lt;br>

            Typically a Thursday, this day can be thought of as a “prep day.” There are several key events that a team should
            be prepared for on the first day, both related and unrelated to your robot. Here is a quick list of things to remember
            for the preparation stage: &lt;br> &lt;br>
Attach any last-minute mechanisms quickly and efficiently. &lt;br>
Organize your pit so you don’t have to scramble to find tools or parts. &lt;br>
Test to make sure everything works before inspections.\n&lt;br>
Organize your team to make inspections run smoothly.\n&lt;br>
Be prepared to change something about your robot.\n&lt;br> &lt;br>
Use this day to pit scout (See Strategy section).
NEVER miss a practice match unless absolutely necessary!
Use the open practice field to your advantage.
Always be on your best behavior; Judges are everywhere, even on Thursdays.\n\n&lt;br> &lt;br>


First of all, your robot needs to be legal. In order to insure that happens, read the FRC Inspection Checklist very carefully
            (it often changes between years, so look out!). Often times, teams will arrive at competition having seldom weighed
            or measured their robot, which forces them to either remove mechanisms or sacrifice the structural integrity of their
            design. This can be devastating, especially to newer teams. Whether you’re a veteran or rookie team, it should be top
            priority to examine the checklist before competition. Then when you finally get to the front of the inspection line,
            the volunteer can check you off quickly, and you can be on your way to the practice field!\n\n&lt;br> &lt;br>

Sometimes you may encounter unforeseen weight problems or frame perimeter issues (these two are the most common).
            This is why your Pit Crew needs to be ready. If you ever run into weight issues, here are some quick fixes
            that may help your team:\n\n&lt;br> &lt;br>

Take off decorative materials (LED’s, stuffed animals, etc.)\n&lt;br>
Replace fancy side panels with lighter equivalents (paper/cardboard)\n&lt;br>
Use a Dremel or drill to cut holes or “swiss cheese” non-load-bearing metal\n&lt;br>
Replace wheels with lighter types that still serve their purpose.\n\n&lt;br> &lt;br>

Having an organized and clean pit is vital to efficiency. Every minute you waste trying to find the
            correct size wrench is time taken from your practice driving! This brings us to the next
            step in the preparation day, which is to use the practice field and your scheduled practice
            matches to get to know the field. Chances are, the field will differ from your workspace equivalent.
            It is important to discover these discrepancies the day before qualifying matches, just in case they
            affect the strategy or capabilities of your robot. Additionally, practicing pre-match tasks
            (lining up for autonomous, setting up the driver station, etc) familiarizing yourself with
            the experience behind the controls in a real-life setting is invaluable, especially to those
            teams who are unable to have extensive driver practice before competition.\n\n&lt;br> &lt;br>

Finally, this preparation day is just as important for those who aren’t a part of the pit
            crew or drive team. This is the perfect time to perform pit scouting, or to even
            watch practice matches and get to know the robots. For more details about pit scouting, see the
            Strategy section. To summarize, you send out team members to gather information directly from the
            members of other teams and take notes on their physical robots, rather than their performance. For those
            not participating in mechanical or scouting roles, it is important to keep up your team image. As previously mentioned,
            Judges are roaming the pits and stands at all times, and having a stands full of kids looking down at
            their phones isn’t very exciting. Act excited! Cheer for your team during practice matches! Practice cheers,
            dance to music, and be energized, because Judges will notice you!


</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_districts.xml -->
    <eat-comment/>
    <string-array name="disc_elims">
        <item>fragment_pager_item_no_image</item>
        <item>Elimination Matches</item>
        <item>OOn Saturday, the elimination matches begin after lunch normally. Alliance selection occurs before then, this is how it works: \n\n&lt;br> &lt;br>

Every team sends one representative to the field. Generally you should send the person on your team who is most knowledgeable about the pick list and other teams.
The representatives from the top eight teams stand on the field as they are announced. The announcer will give a quick explanation of the system and then ask the first seeded team who they want to pick.
Once they have asked, a team can choose to accept or decline. Remember: if you decline an alliance, you can NOT be picked by any other team.
Once the a team accepts an invitation, they move on to the next seeded team. If one of the teams in the top 8 is picked by another, each spot moves up and the next highest ranked team becomes an alliance captain.
They will continue down the line until the eighth team makes their first pick. Then, they go back up the line (also known as a “snake draft”), where each team makes a second selection, starting with the eighth seed.
By the end of selections, if your team is not picked, don’t leave! Just because your robot wasn’t picked doesn’t mean you can’t win awards or be chosen as a backup robot if another alliance’s robot breaks. Just settle in, keep answering judge questions, and have a good time watching elimination matches! Judges also look for teams acting gracious and professional when they lose too!\n\n&lt;br> &lt;br>

	If you are lucky enough to participate in elimination matches, it is important to communicate with your alliance. It is no longer randomly selected, these two other teams are in it for the long haul with you. You need to formulate a strategy, suited to counter your opposing alliance’s strategy. Again, scouting information from Qualification matches comes in handy for this. However, it is not as important to scout during elimination matches, since alliances have already been selected. Just be sure to keep in touch with any major events that happen, like a robot getting destroyed or dropping connection.

When the matches begin, pay attention to the schedule, and queue for matches like normal. Important to remember: NEVER take a match for granted! Even if you’re the first alliance against the eighth seed, don’t expect to win due to your rank alone. Upsets don’t only occur in Robotics, they are quite common! If you lose your first match, don’t fret. Elimination matches are played in two out of three series. All you need to do to move on is win two matches. In order to win the competition, you have to win six matches total, or three levels of eliminations. Remember, now that rankings no longer matter, the only thing that matters is getting more points than the other team, as opposed to the Ranking Points of Qualifications. Another important aspect to remember is that the first tiebreaker for elimination matches is penalties: whichever team has fewer penalties wins ties. This may seem unlikely, but when two highly skilled alliances play against each other, ties can be quite common. An example of this was the 2016 FIRST Stronghold World Championship Finals. Going into the third and final match, each alliance had one win, and the third match was a tie. However, one alliance had two minor penalties, which cost them the Championship. Besides these nuances, elimination matches run identically to Qualification matches, and follow the same structure as described above. Once the elimination matches have completed, and your team is either sitting in the stands or celebrating a competition win, prepare yourselves for the Award Ceremony. &lt;br> &lt;br>

The Award Ceremony begins shortly after the final elimination matches, and you should aim to have your entire team in the stands! Prepare for about two hours of standing and clapping and cheering, because it’s common courtesy to cheer for every team’s victory. The awards you can win are explained in more detail in the Game Manual Section 6, so look there for more information on them. If your team is called down to the field, walk down the designated path, receive your trophy, and shake the judges’ and referees’ hands, then sit back down and listen for the next award. Once the Award Ceremony is complete, and Closing Ceremonies finishes, you are free to go! Pack up your pits, re-bag your robot, and prepare for your next competition if you have one! Remember: whether or not you qualify for the next round of competition, enjoy the experience of this one! There is nothing else in the world like a robotics competition, so be sure to take it all in.</item>
        <item/>
    </string-array>
    <string-array name="disc_higher_lvls">
        <item>fragment_pager_item_no_image</item>
        <item>Higher Levels of Competition</item>
        <item>Unlike regionals, District Competitions do not directly qualify a team for the World Championships. There is an additional level of competition in a district system: the District Championship. Teams qualify for this competition based off of District points they’ve accrued through their best two District competitions (each team is guaranteed at least two). The points a team can earn based off of their performance at a competition. &lt;br>&lt;br>














	Once a team has competed in their District Competitions, a certain amount of teams with the highest total points move on to the District Championship Competition. For more specific information on how many teams qualify in your district, be sure to check the most recent Admin Manual (available on firstinspires.org) for clarification. The District Championships work the same as a Regional Competition (see the section on the Regional Competition), and only certain awards qualify teams for the World Championships. Again, check the Admin Manual for which awards these are, but some guaranteed qualifying awards are those such as Winning Alliance, District Championship Chairman’s Award Winner, and Engineering Inspiration Award Winner. Some districts give out several Chairman’s Awards as well, so be sure to know your district’s rules well. &lt;br>&lt;br>

	If you qualify for World Championships, know that there are two World Championship competitions, so be sure you know which one you will attend. Here are the locations for the next few years:&lt;br>&lt;br>
2017: North Championship in St. Louis, MO and South Championship in Houston, TX&lt;br>&lt;br>
2018+: North Championship in Detroit, MI and South Championship in Houston, TX&lt;br>&lt;br>
For more information on which championship your team should attend, look up your team information on www.thebluealliance.com or follow this link to the map:&lt;br>&lt;br>
http://www.firstinspires.org/sites/default/files/uploads/championship/first-championship-maps-2017-2018.pdf#page=2&lt;br>&lt;br>

	World championships runs the same as normal competitions, except there are four divisions at each Championship. These divisions work the same as regular competitions, and then the winning alliances of each division play against each other on what is known as the Einstein Elimination rounds. Just having a chance to compete in the World Championships is a unique experience, and you are very lucky if you get to see it firsthand! Always remember to have fun regardless of your performance, because after everything, FIRST is more than robots

</item>
        <item/>
    </string-array>
    <string-array name="disc_prep">
        <item>fragment_pager_item_no_image</item>
        <item>Preparation</item>
        <item>During your three-day competition, this “preparation” stage generally takes up the entire first day.&lt;br> &lt;br>

            Typically a Thursday, this day can be thought of as a “prep day.” There are several key events that a team should
            be prepared for on the first day, both related and unrelated to your robot. Here is a quick list of things to remember
            for the preparation stage: &lt;br> &lt;br>
Attach any last-minute mechanisms quickly and efficiently. &lt;br>
Organize your pit so you don’t have to scramble to find tools or parts. &lt;br>
Test to make sure everything works before inspections.\n&lt;br>
Organize your team to make inspections run smoothly.\n&lt;br>
Be prepared to change something about your robot.\n&lt;br> &lt;br>
Use this day to pit scout (See Strategy section).
NEVER miss a practice match unless absolutely necessary!
Use the open practice field to your advantage.
Always be on your best behavior; Judges are everywhere, even on Thursdays.\n\n&lt;br> &lt;br>


First of all, your robot needs to be legal. In order to insure that happens, read the FRC Inspection Checklist very carefully
            (it often changes between years, so look out!). Often times, teams will arrive at competition having seldom weighed
            or measured their robot, which forces them to either remove mechanisms or sacrifice the structural integrity of their
            design. This can be devastating, especially to newer teams. Whether you’re a veteran or rookie team, it should be top
            priority to examine the checklist before competition. Then when you finally get to the front of the inspection line,
            the volunteer can check you off quickly, and you can be on your way to the practice field!\n\n&lt;br> &lt;br>

Sometimes you may encounter unforeseen weight problems or frame perimeter issues (these two are the most common).
            This is why your Pit Crew needs to be ready. If you ever run into weight issues, here are some quick fixes
            that may help your team:\n\n&lt;br> &lt;br>

Take off decorative materials (LED’s, stuffed animals, etc.)\n&lt;br>
Replace fancy side panels with lighter equivalents (paper/cardboard)\n&lt;br>
Use a Dremel or drill to cut holes or “swiss cheese” non-load-bearing metal\n&lt;br>
Replace wheels with lighter types that still serve their purpose.\n\n&lt;br> &lt;br>

Having an organized and clean pit is vital to efficiency. Every minute you waste trying to find the
            correct size wrench is time taken from your practice driving! This brings us to the next
            step in the preparation day, which is to use the practice field and your scheduled practice
            matches to get to know the field. Chances are, the field will differ from your workspace equivalent.
            It is important to discover these discrepancies the day before qualifying matches, just in case they
            affect the strategy or capabilities of your robot. Additionally, practicing pre-match tasks
            (lining up for autonomous, setting up the driver station, etc) familiarizing yourself with
            the experience behind the controls in a real-life setting is invaluable, especially to those
            teams who are unable to have extensive driver practice before competition.\n\n&lt;br> &lt;br>

Finally, this preparation day is just as important for those who aren’t a part of the pit
            crew or drive team. This is the perfect time to perform pit scouting, or to even
            watch practice matches and get to know the robots. For more details about pit scouting, see the
            Strategy section. To summarize, you send out team members to gather information directly from the
            members of other teams and take notes on their physical robots, rather than their performance. For those
            not participating in mechanical or scouting roles, it is important to keep up your team image. As previously mentioned,
            Judges are roaming the pits and stands at all times, and having a stands full of kids looking down at
            their phones isn’t very exciting. Act excited! Cheer for your team during practice matches! Practice cheers,
            dance to music, and be energized, because Judges will notice you!</item>
        <item/>
    </string-array>
    <string-array name="disc_quals">
        <item>fragment_pager_item_no_image</item>
        <item>Qualifying Matches</item>
        <item>The second portion of the competition starts the competitive matches. The energy-filled day begins with a
            rush to the stands. If you want to make sure you get a good section for your team to cheer, be sure
            to send a team of around six members to run into the stands and reserve a couple rows. Often times, teams
            will get stuck with either not enough room to fit their whole team, or horrible angle that doesn’t allow them
            to see the robots perform. Once the seating rush is over, many teams use the practice field and it is difficult
            to get a spot. This is why the time allotted for drive practice during Thursday is so important. If your robot is
            working and you have had ample driving practice, don’t be afraid to relax. Organize your scouters, finish any pit
            scouting, and practice some cheers (some some sort of “Good Morning” cheer is always fun, (see Team Spirit section).
            This is the “calm before the storm,” so enjoy it. \n\n&lt;br> &lt;br>

	Another event that is important to remember on Friday is the Driver’s Meeting. This is for drive teams only,
            and is essentially a Q and A with the judges and referees. This meeting is essential to teams who have
            questions about any aspect of their strategy and its legality. It’s better to ask an obvious question
            in this meeting than to get penalized for it later! Go into the meeting with a list of any questions
            you may have, and be prepared to prioritize, as the meeting is only around 15-20 minutes. At the end of
            the driver meeting, each team receives a copy of the match schedule, which should be analyzed before Opening
            Ceremonies. Take it back to your Pits and create a list of your matches, their times, your alliance partners,
            who you’re against, and your alliance color. You can use this information to your advantage, so be sure to communicate
            with your scouters throughout the day to get the most updated information!\n\n&lt;br> &lt;br>

	Have your whole team attend the opening ceremonies, and if you’re in the few matches, you may
            be required to set up your robot or queue. The first match will begin immediately after
            Opening Ceremonies. The basic structure of a match is:\n\n\n&lt;br> &lt;br>
Bring your robot to Queuing, which corresponds to your alliance color and number, two matches
            before your scheduled match. You will wait here for the next match, then move to
            the next level of Queuing. After the second match, start moving towards the field.\n\n&lt;br> &lt;br>
Have two drive team members carry the robot onto the field and line it up for autonomous. \n\n&lt;br> &lt;br>
Have a third member connect your team’s driver station to the field control system using the provided
            Ethernet cable. Make sure you can connect to your robot and test your controllers to make
            sure everything is plugged in! Then select the correct autonomous program if you have one.\n\n&lt;br> &lt;br>
Have the fourth member move the robot cart to the designated area.\n\n&lt;br> &lt;br>
Wait for the announcers to finish introducing the teams (when they announce your team, it’s
            always fun to coordinate a move or gesture to give your team recognition, such as a bow or a dance move. Be creative!)\n\n&lt;br> &lt;br>
Once the match begins (Begin in 3… 2… 1… GO!), stand behind the white driver station line
            until the autonomous period ends and the teleoperated period begins. In FRC,
            there is no delay between autonomous and teleop, so be prepared to start driving immediately!\n\n&lt;br> &lt;br>
After the match has completed, wait until the referees deem it acceptable to remove your robots
            from the field. Have one team member retrieve your cart, one disconnect the driver station, and two lift it off the field.\n\n&lt;br> &lt;br>
Take the robot back to your pit, assess any damage or malfunctions, and prepare to repeat the cycle!\n\n\n&lt;br> &lt;br> &lt;br>

	It’s also important to know how the ranking system works at a competition during the qualifying
            rounds. The whole system works off of “Ranking Points,” abbreviated to “RP.” \n\n\n&lt;br> &lt;br>
A win in a match awards each team on the winning alliance Two (2) RP\n\n&lt;br> &lt;br>
A tie awards each team on both alliances One (1) RP\n\n&lt;br> &lt;br>
A loss yields Zero (0) RP\n\n\n&lt;br> &lt;br>
Some years, the game may award extra RP to an alliance for completing certain tasks during the match
            (for example, in 2016 FIRST Stronghold, an alliance was awarded 1 RP for breaching 4 out of
            5 of the other team’s defenses, and 1 RP for making at least 10 shots, in addition to the Win/Loss/Tie RP)\n\n&lt;br> &lt;br>
A team’s RP are cumulative throughout the Qualifying Matches, and they are the first determinant in a team’s ranking.
            However, since they are based off of wins and losses, many teams often end with the same RP.
            Because of this, tiebreakers are organized in tiers. Unfortunately, these often change
            between years due to what the game creators believe is more difficult. For an example,
            the 2016 FIRST Stronghold Tiebreakers were as follows:\n\n\n&lt;br> &lt;br>

Ranking Points (RP)\n\n&lt;br> &lt;br>
Cumulative Autonomous Points\n\n&lt;br> &lt;br>
Cumulative Scaling/Challenge Points\n\n&lt;br> &lt;br>
Cumulative Goal Points\n\n&lt;br> &lt;br>
Cumulative Defense Crossing Points\n\n&lt;br> &lt;br>
Record (W-L-T)\n\n\n&lt;br> &lt;br> &lt;br>

In order to know what the ranking tiebreakers are for the current season, be sure to check the Game Manual
            Section 5 about Tournaments. Generally speaking, a team will play around 12-15 matches in a
            District Competition. Always send at least one member of your team to every match, even if
            your robot is inoperable. If no one is there, your team receives 0 RP for that match and is
            listed as a “No-Show.” Even if you find yourself ranked near the bottom, there is always a chance
            you will get picked later on, so never lose hope! During the qualifying matches, there are a couple
            things to remember for those who aren’t on the drive team:\n\n\n &lt;br> &lt;br>

Make sure your team maintains a positive presence in the stands. Those who aren’t scouting
            or on Pit Crew should be celebrating whenever your team is on the field, regardless
            of performance. For more information, see the Team Spirit section.\n\n&lt;br> &lt;br>
Always Scout, utilizing both Quantitative and Qualitative methods (see Strategy section for more
            information on those), and most importantly communicate scouting data with the drive team.
            You may have information about their opponents or partners that they could use in the match,
            such as a weak spot of a good robot.\n\n&lt;br> &lt;br>
Never leave your pits empty! Teams of judges are walking throughout the pits even
            during matches to ask your team questions that are critical to your team’s
            award success. You always want someone knowledgeable in non-STEM
            and STEM departments available to interview with judges. \n\n\n&lt;br> &lt;br> &lt;br>

	Once Friday is complete, it will be pretty clear which teams will end up being
            ranked within the top eight, even though the qualification matches usually
            spill into Saturday morning. It is recommended that your Strategy team gathers
            together Friday night and builds a kind of “Pick List” of teams you want to keep
            your eye on for the next day. Whether you are ranked highly and are looking for teams to pick
            , or you are looking for teams to advertise yourself to if you’re ranked lower, having
            a pick list going into the last day of competition is always a good idea. This strategy
            meeting is where the data from Pit, Qualitative, and Quantitative scouting are all utilized.
            See the Strategy section for more info on the usage of scouting data. \n\n\n&lt;br> &lt;br> &lt;br>

	Entering the final day of competition, the qualification matches will continue to run for most of the morning,
            and alliance selections usually begin during lunch. Since the pick list is already made,
            have your scouters mostly focus on those teams. Since you are now able to filter out the teams
            you don’t need to watch, you can have your scouting teams relax a little bit. Again, be sure to communicate
            any important information about those teams to the strategy team! It is now more important than
            ever to tell them if a robot that you previously thought was good breaks or has issues, because
            it can be devastating to find out your alliance partner in eliminations can’t perform.
            As lunch draws nearer, and qualification matches start to wind down, it’s time to settle in,
            because Alliance Selections are about to begin, and Elimination Matches are soon to follow!</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_other_driveteam.xml -->
    <eat-comment/>
    <string-array name="drive_team">
        <item>fragment_pager_item_no_image</item>
        <item>Drive Team</item>
        <item>The drive team is the group of 4 individuals that includes the driver, operator, coach, and human player.&lt;br>&lt;br>
Driver: The person who mans the main controls for the robot. Primarily, the driving.&lt;br>&lt;br>
Operator: The person who mans the mechanisms for the robot. They must be able to work very well with the driver because they, together, physically control the robot.&lt;br>&lt;br>
Coach: The person who guides the driver and operator during a match. They generally tell the drivers what to do or tell them what to be mindful of.&lt;br>&lt;br>
This position can be filled by a mentor.&lt;br>&lt;br>
Human Player: Usually, games include a task for a human to accomplish. The human player accomplishes this task.&lt;br>&lt;br>

Ideally, members of the drive team should be familiar with technical aspects of the robot, possibly a member of one of the technical departments. This way they will know the design well, and how it functions. This could help to put ease on the amount of people in the pits. If you want at least two people from each department, the drive team could help satisfy some of those positions, making the pits less cluttered&lt;br>&lt;br>
Students in any grade are encouraged to actively contribute to the team in all areas including being on the drive team. Students interested in being on the drive team are encouraged to talk to the mentors and students organizing the drive team if they have questions or need more information.&lt;br>&lt;br>&lt;br>

Drive team members are expected to:&lt;br>&lt;br>
Attend all days of all of the competitions during the regular competition season.  Drive team members must be there for all matches including delayed matches that take place after the event was scheduled to end.&lt;br>&lt;br>
Show up for all of the practices.&lt;br>&lt;br>
Be on time for all practices, meetings, and competitions.  At the competitions, drive team members will be responsible for getting the robot and themselves ready and queued for matches.&lt;br>&lt;br>
Be able to concentrate in high stress situations.&lt;br>&lt;br>
Read and respond as necessary to drive team emails and team emails in a timely manner.&lt;br>&lt;br>
Work closely with and respond quickly and positively to the mentors and students leading the drive team.&lt;br>&lt;br>
Be committed to excellence in being the best they can at their position.  For example, if a coach/strategy heads tells them to work on a particular driving skill, they will work on that skill and do their best to understand what the coach/strategy head is coaching them to do and learn it.&lt;br>&lt;br>
Read all of the competition rules and updates. They need to be intimately familiar with the scoring and penalty rules.&lt;br>&lt;br>
Avoid damaging the robot.  For example, if the mechanical heads say it will likely damage the robot to drive fast over a bump, the driver will respect that and not do it.&lt;br>&lt;br>
Be respectful to all teams and be a good sport.  For example, help an opponent whose robot needs repair rather than laughing at them.  It is OK to celebrate winning. Congratulate opponents for a good competition and complement the good aspects of their robot and driving.  Boasting is prohibited.  Avoid damaging opponent\'s robots.&lt;br>&lt;br>
Work on designing, building, programming, and fielding the robot.  Actively help pack the competition crates together before you leave for competitions and know what needs to be taken down to the competition fields.  Drive team members are key members of the pit crew that keep the robot in competition condition.&lt;br>&lt;br>
Be ready for competitions by getting enough sleep (6 hours is not enough, 8 or more is better) for several days before and during the competition so they are well rested and able to perform their best.  At the competitions, they will go to bed by 10 pm each night before they compete.&lt;br>&lt;br>
Team Leadership have final say who is on the drive team and will involve student leaders as is appropriate.&lt;br>&lt;br>&lt;br>

They must understand that:&lt;br>&lt;br>
It is a privilege to be on the drive team.&lt;br>&lt;br>
Good drive team members are like test pilots. Highly skilled and able to communicate what they saw and how the robot behaved to the drive team leaders and coaches.&lt;br>&lt;br>
Competitions are intense and not everyone performs under competition pressures as well as they do at practices.  Plenty of sleep and food help with this.&lt;br>&lt;br>
They must always be on their best behavior as they are very visible members of the team.&lt;br>&lt;br>
Being on the drive team is not for everyone and sometimes it becomes clear to the leadership that someone else will serve the team better and drive team members may be replaced.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_electrical.xml -->
    <eat-comment/>
    <string-array name="elect_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical at Competition</item>
        <item>Your team will want at least one electrically inclined person in your team’s pit. If anything is to happen to the electronics or pneumatics, the person in the pits will need to be ready to provide a solution efficiently.&lt;br>&lt;br>&lt;br>

Inspection&lt;br>&lt;br>
	During inspection, there should be one electrically inclined person there to speak with the inspector and show him or her their electrical board, all the components, and demonstrate that they work correctly and safely. Review the Inspection Checklist on firstinspires.org to make sure you know what you will need to show and deomstrate to the inspector&lt;br>&lt;br>&lt;br>

Maintenance&lt;br>&lt;br>
Make sure you will be ready at all times to change something on the electrical board and rewire. You will need to be able to diagnose the problem, then fix it. Make sure to check connectors. Sometimes they break and are hard to notice, causing time to be wasted when the solution is simple. &lt;br>&lt;br>&lt;br>

Talking to Judges&lt;br>&lt;br>
	Judges may be curious about electrical components, especially sensors. If implemented well and unique, a sensor could help you win an award, such as Innovation in Control or Creativity. Be ready to explain these sensors and how they function. You may want to team up with a programmer for these as they can describe the programming aspect of using that sensor.
</item>
        <item/>
    </string-array>
    <string-array name="elect_components">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical Components</item>
        <item>In order to make your robot drive you must have components. These are the basic components you need to get your robot up and running. With just these components you can drive up to 10 motors, power a compressor and solenoids, and have the ability to add whatever sensors you may need.&lt;br>&lt;br>
            NI RoboRIO: This is the Brain of your robot. It is what reads the code and tells motors to move. It has multiple different ports for interfacing with sensors, motors, and other devices.&lt;br>&lt;br>
Power Distribution Board: This is what provides power to the robot. The power distribution board or PDP for short allows you to split the Batteries main power into multiple outputs. Each output has its own breaker to ensure that your motors don\'t burn out.&lt;br>&lt;br>
Motor Controllers: There are several types of motor controllers that are legal in FRC. The most common being the Talon SRX, the Victor SP, the Talon SR, the Victor 888, and the Jaguar. With the exception of the Talon SRX most controllers use PWM (Pulse Width Modulation) to receive commands from the RoboRio. The Talon SRX uses Can Wire. Both Methods will be expanded upon later.&lt;br>&lt;br>
Pneumatic Control Module: The PCM or Pneumatic Control Module, allows you to add pneumatics to your robot. The PCM controls your compressor and solenoids to ensure a safe pneumatics system.&lt;br>&lt;br>
Voltage Regulator Module: The VRM or Voltage Regulator Module converts the 12v from the PDP into different voltages and amperages. This is what is used to supply voltage to the router, any cameras, or lights.&lt;br>&lt;br>
Radios: Radios otherwise known as Routers are used to communicate with the driver station. The router has 2 ethernet ports. One ethernet port is dedicated for the RoboRio, the 2nd ethernet port can be used for a variety of other devices like cameras, sensors, or offboard processors.</item>
        <item/>
    </string-array>
    <string-array name="elect_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to Electricity</item>
        <item>Electricity: A form of energy resulting from the existence of charged particles (such as electrons or protons), either statically as an accumulation of charge or dynamically as a current.&lt;br>&lt;br>
Electrical circuit: a path in which electrons from a voltage or current source flow. &lt;br>&lt;br>

Voltage: The difference in charge between the ends of the circuit (The force behind the
     circuit or how strong it is)
Measured in volts (V)&lt;br>&lt;br>
Current: The rate at which charge is flowing (The amount of electrons flowing)&lt;br>&lt;br>
Current (I) is measured in amperes, also known as amps (A)&lt;br>&lt;br>
Related to wire gauge and resistance of wire material&lt;br>&lt;br>
Not the speed of the electricity! Speed of electricity will stay relatively the same in any specific medium&lt;br>&lt;br>
Resistance: A material’s tendency to resist the flow of electricity&lt;br>
Resistance (R) is measured in ohms (Ω)&lt;br>&lt;br>

- Voltage is directly proportional to current and resistance&lt;br>
V = I • R  or  1V = 1A • 1Ω
</item>
        <item/>
    </string-array>
    <string-array name="elect_tools">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical Tools</item>
        <item>Wire: a single conductor(material most commonly being copper or aluminium)&lt;br>&lt;br>

Cable: is two or more insulated wires wrapped in one jacket&lt;br>&lt;br>

Dykes (wire cutter): Dikes are a general tool that end up working really well for electrical. Most commonly used for cutting wires and zip ties, the dikes can be very handy when you need to change the layout of your electrical board.&lt;br>&lt;br>

Wire Striper: The wire stripper is one of the most important tools for electrical. It allows for the insulation on the ends of a wire to be cut without damaging the conductor. In most cases you only need to strip about 1 quarter inch, however the length you strip wire can vary based on the task you are performing.&lt;br>&lt;br>

Voltmeter: This is one of the most useful tools when something goes wrong. The voltmeter allows you to check a variety of different things the most basic being volts, amps, resistance, continuity, and some have more capabilities.&lt;br>&lt;br>

Small Screwdrivers: Small screwdrivers are a must in order to open the power distribution connectors, connect power to the rio, and open other small hard to reach connectors. Having a separate set of screwdrivers specifically for electrical helps keep the ends of the screwdriver in tact.&lt;br>&lt;br>

Soldering Iron: The solder is useless without something to melt it. The Soldering Iron is what melts the solder, some soldering irons simply plug into the wall with no extra controls while others have different temperature settings. The digital soldering irons generally allow for heats ranging from 100-800 or 900. These hot temperatures can melt the insulation off low gauge wires so start with a lower temp then add heat until the solder melts quickly when heated.&lt;br>&lt;br>

Solder: Solder is a combination of lead and tin, It has an very low melting point making it suitable for joining 2 wires together in a process similar to welding called soldering.&lt;br>&lt;br>

Heat Shrink: Heat shrink is a much more effective means of covering a connection than electrical tape. It does require some planning and takes slightly more time to apply. It works exactly how it sounds, by shrinking when heat is applied. The heat generally is from a heat gun but if your budget is tight then a lighter or soldering iron will work however it reduces the life of your soldering iron.
</item>
        <item/>
    </string-array>
    <string-array name="elect_week1">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical Week 1</item>
        <item>Like the other technical departments, the electrical department will focus on robot strategy by participating in the design process.&lt;br>&lt;br>

Design Process&lt;br>&lt;br>
Along with the strategy, electrical, programming, and CAD (if you have one) departments, the electrical department should contribute in deciding what you want to the robot to do.&lt;br>&lt;br>
Do you want the robot to focus on pure offense?&lt;br>&lt;br>
Is there an endgame task you want your robot to accomplish?&lt;br>&lt;br>
How important is this endgame task? How many points does it reward you with?&lt;br>&lt;br>
Do you want to focus on defense? Is there even defense?&lt;br>&lt;br>
Do you want to try to do everything?&lt;br>&lt;br>
You will need a lot of electrical components. Doing this will likely require a lot of motors, which requires a lot of controllers. This is expensive. Make sure your team is well prepared for taking on the difficult task of accomplishing everything.&lt;br>&lt;br>
What kind of drivetrain will work well in this game and help our strategy?&lt;br>&lt;br>
	Each department has a special skill that is vital to the design process. The electrical department’s role in the designing process is to know what the department can accomplish. If someone proposes a design that would be too difficult for the electrical department to accomplish, the department should work to try to change the design for it to be a more accomplishable goal for them. This is true for other departments as they should also be acting as a check on the designs, adding their input regarding the abilities of the department, determining whether a design or goal is feasible.&lt;br>&lt;br>

Prototyping&lt;br>&lt;br>
	The electrical department will most likely be working with the mechanical department on making prototypes. You may have to wire motors up, and possibly attach motor controllers, and Power Distro, et. al. to be able to do more than just power the motor with a battery.&lt;br>&lt;br>
	If you have pneumatics to test, you may also have to hook up a pneumatics system for prototyping. However, if you don’t have pneumatics, you can also do the calculations, then mimic pneumatics by simply moving the prototypes with your hands. There is no inherent harm in this.&lt;br>&lt;br>

Shopping&lt;br>&lt;br>
	Do you need more of something? If you are running low on motor controllers, you may need more. This week is a great time to gauge what you may need more of, then order them. If you plan on ordering pistons, put it off until week 2 when you have the robot design finalized.
</item>
        <item/>
    </string-array>
    <string-array name="elect_week2">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical Week 2</item>
        <item>Week 2 focuses on testing the prototypes that the electrical, mechanical, and possibly the programming departments have made. After that, you will be working with the technical departments and strategy to finalize the design of the robot. &lt;br>&lt;br>&lt;br>

Prototyping&lt;br>&lt;br>
	The week before should have focused on building the prototypes and wiring them. If need be, finish wiring up those prototypes and start testing. The mechanical department section has more information regarding prototypes. In general, the electrical should not need to change much about prototypes because most changes would be mechanical or programming. &lt;br>&lt;br>
	Instances where you may need to change things in the prototype:&lt;br>&lt;br>
Changing motors: you will need to rewire the motors&lt;br>&lt;br>
Changing (theoretical) pistons: If you are prototyping with pistons, including theoretical ones, you may change the prototype by changing pistons, whether it be altering the bore size, the pitch, the type of solenoid (works less so with theoretical situations)&lt;br>&lt;br>
	Prototyping specifically for electrical may involve the usage of different sensors or cameras. This will for sure involve the programming department as they will need to familiarize themselves with these sensors and how to use and program them. The electrical and programming departments should be familiar with any sensor or camera before they implement it on the robot. If either department is not familiar with their function or how to execute said function, chances are it will not find its way to working condition for the competition. &lt;br>&lt;br>&lt;br>

Finalize the Design&lt;br>&lt;br>
In finalizing the design, the electrical department will need to work with the CAD and mechanical departments for designing how the electrical components are to fit with all of the mechanical components. In many cases, the electrical components are mounted securely in protected areas. Exposed electrical components could lead to them to being damaged should something hit it, such as another robot or a game piece. As such, man teams decide to mount the electrical on a “belly pan,” which is mounted on the drivetrain, keeping it low to the ground and protected by the drivetrain rails. &lt;br>&lt;br>&lt;br>

Modular?&lt;br>&lt;br>
	Modular electrical boards are those that can, by unplugging motors, servos, cameras, etc., be completely removed from the robot. This can allow the mechanical department to work on the robot and the electrical department to work on the electrical board separately and simultaneously with ease. The picture on the right is our modular electrical board from 2016. It fit into a slot on the back of our shooter mechanism.&lt;br>&lt;br>
Remember, because of the usual compactness of modular boards, it can be hard for things to be clearly visible to inspectors. Remember, in the design for your electrical board, that you review the Inspector’s checklist for electrical components so your design will satisfy the checklist. &lt;br>&lt;br>&lt;br>


Shopping?&lt;br>&lt;br>
	With the robot’s design finalized, you must now address what needs to be purchased. If you are lacking any part, you will need to purchase it now. If piston calculations have been finalized, you can purchase them now (we recommend Bimba as their selection and customization is very desirable for most FRC teams). However, if CAD still has to answer some questions regarding piston geometry, you may again have to wait. </item>
        <item/>
    </string-array>
    <string-array name="elect_week3_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Electrical Week 3 Through Competition</item>
        <item>The primary focus from here on out for the electrical department is to create the electrical board and mount the necessary components. You must do any maintenance as well&lt;br>&lt;br>&lt;br>

STAY ORGANIZED&lt;br>&lt;br>
	Figuring out what goes to where on an electrical system is extremely difficult when nothing is labeled, or simply when wires are strewn around the robot haphazardly. As such, you NEED to be organized.&lt;br>&lt;br>
You need to label everything. Each motor controller needs to be clearly labeled, saying what motor it is powering. For pneumatic systems, your release valve needs to be clearly labeled. The more labels you can understand, the better. &lt;br>&lt;br>
Keep wires from going everywhere. Wires should be cleanly zip tied to wires that run with each other, and mounted to structural components. This keeps them out of the way, as well as making them easier to follow.&lt;br>&lt;br>&lt;br>

Make it maintainable&lt;br>&lt;br>
Electrical components can break. You can burn out motor controllers. You can kill a Voltage Regulator. As such, you need to make it so these components can easily be removed at competition. You want electrical components to be a quick fix, and spending ten minutes to try to get to it will not benefit you at all. This is also where we stress having as many extras as your budget will allow you. Electrical components are expensive, but if you do not have any back ups and one breaks, you are going to be forced to ask to have or borrow another team’s at competition, which may be hard. Teams may not want to risk giving your team their extra, especially considering how expensive they are. &lt;br>&lt;br>&lt;br>

Bag and Tag&lt;br>&lt;br>
	Simply put, you are not required to bag your electrical components on the last day of build season. You may want to do this if your team decided to make a practice bot but cannot afford to get extra electrical components. And since electrical components are COTS, they will not count against your withholding weight. Any mounts, however, will count against your weight, so be mindful of how much material besides your actual components are a part of your system. If you do not bag your electrical board, you may have to rewire your whole electrical system at competition, which will be time consuming. Having a modular board will alleviate most of this. If you do not want to bag one or two components, like a power distro and the Rio (two of the more expensive parts) because you have extras of the rest, that is okay as well. It’s all up to your team on how you want to go about doing Bag and Tag.&lt;br>&lt;br>
	In general, unless you have a practice bot that needs the electrical board, you should just bag it as it will be less of a hassle to deal with at competition, and you will not risk ruining anything. &lt;br>&lt;br>
Read the bag and tag dedicated article for more information. &lt;br>&lt;br>&lt;br>

Between Bag and Tag and Competition&lt;br>&lt;br>
	Depending on what electrical components you have, the electrical department may do very little or a lot.&lt;br>&lt;br>
If you have electrical components with you, you are free to participate in designing whatever mechanism you may want to implement at competition. Without electrical components, you can’t really participate. As long as you have the wiring and the controllers or the pneumatics, you will be able to implement them at competition. However, without a Rio or Power distro, it could be very difficult for the electrical department to be heavily involved. You could try mimicking the components with a raspberry pi or an arduino, though. &lt;br>&lt;br>
You will want to, however, make sure you have everything for competition. Make sure you pack connectors and other components you may need to replace, and the tools necessary to do so. Being prepared is vitally important.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_regionals.xml -->
    <eat-comment/>
    <string-array name="eliminations">
        <item>fragment_pager_item_no_image</item>
        <item>Elimination Matches</item>
        <item>

	On Saturday, the elimination matches begin after lunch normally. Alliance selection occurs before then, this is how it works: \n\n&lt;br> &lt;br>

Every team sends one representative to the field. Generally you should send the person on your team who is most knowledgeable about the pick list and other teams.
The representatives from the top eight teams stand on the field as they are announced. The announcer will give a quick explanation of the system and then ask the first seeded team who they want to pick.
Once they have asked, a team can choose to accept or decline. Remember: if you decline an alliance, you can NOT be picked by any other team.
Once the a team accepts an invitation, they move on to the next seeded team. If one of the teams in the top 8 is picked by another, each spot moves up and the next highest ranked team becomes an alliance captain.
They will continue down the line until the eighth team makes their first pick. Then, they go back up the line (also known as a “snake draft”), where each team makes a second selection, starting with the eighth seed.
By the end of selections, if your team is not picked, don’t leave! Just because your robot wasn’t picked doesn’t mean you can’t win awards or be chosen as a backup robot if another alliance’s robot breaks. Just settle in, keep answering judge questions, and have a good time watching elimination matches! Judges also look for teams acting gracious and professional when they lose too!\n\n&lt;br> &lt;br>

	If you are lucky enough to participate in elimination matches, it is important to communicate with your alliance. It is no longer randomly selected, these two other teams are in it for the long haul with you. You need to formulate a strategy, suited to counter your opposing alliance’s strategy. Again, scouting information from Qualification matches comes in handy for this. However, it is not as important to scout during elimination matches, since alliances have already been selected. Just be sure to keep in touch with any major events that happen, like a robot getting destroyed or dropping connection.

When the matches begin, pay attention to the schedule, and queue for matches like normal. Important to remember: NEVER take a match for granted! Even if you’re the first alliance against the eighth seed, don’t expect to win due to your rank alone. Upsets don’t only occur in Robotics, they are quite common! If you lose your first match, don’t fret. Elimination matches are played in two out of three series. All you need to do to move on is win two matches. In order to win the competition, you have to win six matches total, or three levels of eliminations. Remember, now that rankings no longer matter, the only thing that matters is getting more points than the other team, as opposed to the Ranking Points of Qualifications. Another important aspect to remember is that the first tiebreaker for elimination matches is penalties: whichever team has fewer penalties wins ties. This may seem unlikely, but when two highly skilled alliances play against each other, ties can be quite common. An example of this was the 2016 FIRST Stronghold World Championship Finals. Going into the third and final match, each alliance had one win, and the third match was a tie. However, one alliance had two minor penalties, which cost them the Championship. Besides these nuances, elimination matches run identically to Qualification matches, and follow the same structure as described above. Once the elimination matches have completed, and your team is either sitting in the stands or celebrating a competition win, prepare yourselves for the Award Ceremony. &lt;br> &lt;br>

The Award Ceremony begins shortly after the final elimination matches, and you should aim to have your entire team in the stands! Prepare for about two hours of standing and clapping and cheering, because it’s common courtesy to cheer for every team’s victory. The awards you can win are explained in more detail in the Game Manual Section 6, so look there for more information on them. If your team is called down to the field, walk down the designated path, receive your trophy, and shake the judges’ and referees’ hands, then sit back down and listen for the next award. Once the Award Ceremony is complete, and Closing Ceremonies finishes, you are free to go! Pack up your pits, re-bag your robot, and prepare for your next competition if you have one! Remember: whether or not you qualify for the next round of competition, enjoy the experience of this one! There is nothing else in the world like a robotics competition, so be sure to take it all in.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_other_fundraising.xml -->
    <eat-comment/>
    <string-array name="fundraising_events">
        <item>fragment_pager_item_no_image</item>
        <item>Fundraising Events</item>
        <item>In addition to raising funds from corporations and grant applications, teams can engage the community for support in a variety of ways. Many teams will organize themselves to participate in both small and large fundraising events during the off season. Events such as grocery bagging serve as both a team bonding experience and as a method to bring in funds for the team. While not all of your funding will come from these community involvement events, they do serve as a good way to help bring in additional resources to the team. These events are also a great time to show off your team, engage the community, and find potential sponsors and mentors! Be sure to bring a display explaining your team to the community along with an interactive demo, most likely a robot, and some handouts and contact information. Keeping information such as sponsorship level information and benefits (KING TeC’s is pictured below) on hand during an event could prove useful in the event of a potential sponsor being interested in a team’s endeavors.</item>
        <item/>
    </string-array>
    <string-array name="fundraising_fees">
        <item>fragment_pager_item_no_image</item>
        <item>Activity Fees</item>
        <item>Many teams choose to charge a fee for members to join their robotics program. This helps to take the pressure off finding sponsors, and helps to cover some of the cost of running a robotics team. KING TeC uses this method, and also provides scholarships for those unable to pay the activity fee. For teams with few members, this may not be the most lucrative solution, but for those with a large member base, charging an activity fee can generate substantial income.
</item>
        <item/>
    </string-array>
    <string-array name="fundraising_grants">
        <item>fragment_pager_item_no_image</item>
        <item>Grant Applications</item>
        <item>Grant applications are a great way for teams to obtain funding, usually on a year-by-year basis. Corporations will typically open up their applications in the beginning fall, before build season starts. Teams will usually be asked a series of essay questions pertaining to specifics about how the team operates, organizes itself, and why they would like to receive a grant. When drafting a proposal to the providers of the grant, along with their responses to the prompts, a dedicated group should work together to efficiently explain how their team operates. It is important to consistently search for grants online to explore all of a team’s options. And while the length of a grant’s acceptance period may differ, many will typically provide a hard date where they will provide results.</item>
        <item/>
    </string-array>
    <string-array name="fundraising_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to Fundraising</item>
        <item>In maintaining a long term and successful team, it is essential to make sure there’s enough funding. For many teams, the main source of incoming funds will be provided by corporate level sponsors and activity fees. Grant applications and requests also serve as a way for rookie teams to get a jump start on funding their robotic ventures. Additional funding can also be sourced from the community during team fundraising events. While Grants and Sponsors will serve as a rookie team’s best resources in securing a financially stable team, there are always a variety of additional options available to veteran and rookie teams alike.</item>
        <item/>
    </string-array>
    <string-array name="fundraising_sponsors">
        <item>fragment_pager_item_no_image</item>
        <item>Where to find sponsors</item>
        <item>Sponsors can be found in a variety of ways while raising money to operate an FRC Team. If your team is located within a school district or operates within a school itself, checking with your office’s administration and submitting a grant request for a robotics team is one of the quickest ways to find a long term sponsor. By starting a robotics team in your school district, you’re helping to spread STEM, something many schools set aside district money to fund. Other sponsors can be requested from corporate grant and scholarship providers who will typically open applications in the fall, along with local organizations. Getting in contact with local businesses is as simple as giving them a call, sending an email, or visiting them in-person</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_regionals.xml -->
    <eat-comment/>
    <string-array name="higher_lvls_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Higher Levels of Competition</item>
        <item>

	If your area or state competes using a Regional system, qualifying off of a Regional Competition assures you a spot in the World Championships!
            There are two World Championship competitions, so be sure you know which one you will
            attend. Here are the locations for the next few years:\n\n\n&lt;br> &lt;br>
2017: North Championship in St. Louis, MO and South Championship in Houston, TX\n\n&lt;br> &lt;br>
2018+: North Championship in Detroit, MI and South Championship in Houston, TX\n\n\n&lt;br> &lt;br> &lt;br>
For more information on which championship your team should attend, look up your team information on www.thebluealliance.com or follow this link to the map:
&lt;br> &lt;br> http://www.firstinspires.org/sites/default/files/uploads/championship/first-championship-maps-2017-2018.pdf#page=2\n\n&lt;br> &lt;br>

	World championships runs the same as normal competitions, except there are four divisions at each Championship. These divisions work the same as regular competitions, and then the winning alliances of each division play against each other on what is known as the Einstein Elimination rounds. Just having a chance to compete in the World Championships is a unique experience, and you are very lucky if you get to see it firsthand! Always remember to have fun regardless of your performance, because after everything, FIRST is more than robots.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_inspections.xml -->
    <eat-comment/>
    <string-array name="inspect_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction</item>
        <item>One of the most grueling parts of any robotics competition is the inspection.
            During inspection, your robot is scrutinized by the robot inspectors. They go through
            practically every detail on the robot to make sure it is safe and legal. Depending on
            how prepared you are for inspection, it can either be a fairly quick and easy process,
            or a long and stressful one.</item>
        <item/>
    </string-array>
    <string-array name="inspect_prep">
        <item>fragment_pager_item_no_image</item>
        <item>How to Prepare</item>
        <item>Preparation starts during week 1 of build season. The inspector will check basic things such as the robot’s size and weight. As such, those responsible for creating the design and building the robot need to have an understanding of the robot rules. Even during the building process, you need to check and make sure everything you are doing is staying within the allowed limit.&lt;br>&lt;br>
This applies for everything on your robot, not just the structure. FIRST explicitly outlines allowed components, such as legal pneumatic components, legal wire gauges at different parts of your robot, bumper rules, legal motors, clear labels, etc. We cannot stress enough the importance of understanding all of the robot rules.&lt;br>&lt;br>
Read through the Inspection Checklist. FIRST provides the checklist on firstinspires.org. Before bagging your robot, go through the checklist and do one as a team.&lt;br>&lt;br>
Check for firmware updates for the Rio. This will save time during inspection because updating the Rio can take time. Firstinspires.org has a guide to update firmware.&lt;br>&lt;br>
Follow the correct procedure for bagging and tagging.
</item>
        <item/>
    </string-array>
    <string-array name="inspect_remember">
        <item>fragment_pager_item_no_image</item>
        <item>Things to Remember During Inspection</item>
        <item>Remember, the inspectors want your team to compete and have a fun time. They are not there to criticize your team or punish you. Maintain a calm and collected demeanor  throughout inspection. The inspectors will be more willing to help if you are willing to listen.&lt;br>&lt;br>
Only have a small amount of teammates in the pit during inspection. It is hard for the inspector to go through his or her checklist with even 6 kids in the pit.&lt;br>&lt;br>
Have people in the pits that will know how to address any problems on the robot. The inspectors will be able to help you through problems, but having people who could program, work on the electrical, and fix mechanical problems will inspection run smoothly
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_mechanical.xml -->
    <eat-comment/>
    <string-array name="mech_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Mechanical at Competition</item>
        <item>At competition, the Mechanical department acts as essentially the pit crew for a NASCAR racer. They are responsible for maintaining the robot’s physical well-being. Generally, you want up to three mechanically inclined people in the pits at one time (including people on the drive team). Any more may crowd your pit.&lt;br>&lt;br>
        These people will need to be able to work fast, calmly, and efficiently. If something fatal happens on the field, you need people you can rely on to fix it quickly. As such, the leaders of the mechanical department or the team will need to decide during the build season who is ready to be in the pits to work on the robot. Obviously, if you have more than three or four kids who would work well in the pits, you can split the kids into pit shifts. It does by no means have to be the same people in the pits at all time.&lt;br>&lt;br>
        On 2169, we like to have a small group of kids stay in the pits while the robot is performing in a match or at Queueing. Someone in the stands, watching the match, should contact one of the members in the pit if an emergency arises so the team can be prepared to fix it immediately when the robot gets back.&lt;br>&lt;br>&lt;br>

        Here is a list of specific duties you may come across as a member of the mechanical department:&lt;br>&lt;br>

        Changes During Inspection/Practice Day&lt;br>&lt;br>
        If you made any mechanical changes between bagging the robot and competition, you will have to implement them during the practice day. For example, between the Wisconsin Regional and the Worlds competition in St. Louis in 2015, we added our “Can Burglars,” which grabbed the bins from the middle during autonomous. We had to install that mechanism on our competition robot during the practice day at the Worlds competition. It is better that you make the changes before you get the robot inspected because they might want to reinspect your robot if the changes are noticeable. And the inspectors will be less than happy if the changes you made make your robot illegal.&lt;br>&lt;br>
        General Maintenance:&lt;br>&lt;br>
        After every match, just check every mechanism and part of the robot and make sure everything works and isn’t broken. Check bolts and shaft collars and things that could come loose. If you have treaded wheels, keep watch of them and replace the tread whenever you notice them getting bald. If your transmission is through chain and have a tensioning system, check the chain’s tension and change it if you notice it getting out of ideal tension.&lt;br>&lt;br>
        Emergency Fixes:&lt;br>&lt;br>
        Every pit crew member’s worst nightmare. Something, perhaps a mechanism, may break. A belt may snap. A weld may break. A motor may burn out. A bar may bend. In these emergency situations, it is time to dig into your spare parts and see what you may have to replace the broken part. The process is very similar to how fixes are done during the build season. First, you diagnose the problem. Did that structural component break because it was made out of plastic versachassis? If so, do you have enough weight to change it into metal? (if you even have metal versachassis). If not, what can you do to avoid it happening again? That is the primary principle: how can you keep this from repeating? It may just be a matter of changing how the drivers drive. Either way, you will need to address how to you are to fix it. Hopefully, you planned out your plan of attack for what you are fixing before going to the competition, because a plan will have to be executed either way.&lt;br>&lt;br>
        Some large problems will take a lot time to fix, longer than the amount of time in between matches. You may have to think of and execute whatever temporary fix you can, or deal with not being able to run whatever needs fixing (this is easier to do for auxiliary mechanisms, much harder for a drivetrain). You will have to wait until you have a longer time to work to fix it completely, or do some fixing in the time in between matches&lt;br>&lt;br>
        You cannot weld in the pits, so if a weld breaks, you are going to have to work around it, whether by having gussets or L brackets you can bolt or rivet.&lt;br>&lt;br>

        This is why it is important to have replacement parts for motors, mechanisms, belts, and exposed structural components. Some teams like to bring entirely assembled mechanisms to competition so they can completely replace an entire mechanism if they need to. However, make sure whatever parts you bring are within the allowed weight for withheld parts. Usually the number is around 40 lbs, not including COTS (Commercial Off the Shelf) products.&lt;br>&lt;br>
        Talking to Technical Judges and Pit Scouters:&lt;br>&lt;br>
        Pit Crew members will need to be able to talk about the technical aspects of the robot because judges and other teams will ask you about them.&lt;br>&lt;br>

        Pit scouters will ask questions about what your robot does. You will need to be able to explain the mechanisms and their functions. You should also be able to explain how the mechanisms function. What motor (if any) are they powered with? What gearbox/gearbox ratio are they geared with? If you do not know any answer to a question, ask a member who may know.&lt;br>&lt;br>

        For judges, the discussion will be more formal. When mechanically inclined judges talk to your team, round up the nearby mechanically inclined kids to talk to the judge. Just like whenever talking to judges, remember your etiquette: no interrupting anyone, be respectful, etc.&lt;br>&lt;br>
        The judges can get really in depth with the questions they ask, including your design process the finer details of creating these mechanisms. This is where your engineering notebook will help you significantly. Ideally, your notebook would include calculations, pictures of CAD files, simulation data, testing data, and more. You should be ready to use this notebook content to help answer their questions. It is important you rock these judging sessions because these will determine whether you get any of the technical awards.
        </item>
        <item/>
    </string-array>
    <string-array name="mech_intro">
        <item>fragment_pager_item_no_image</item>
        <item>The Mechanical Department</item>
        <item>The mechanical department, in broad terms, is the group of people who are in charge of building the physical robot. This involves prototyping, fabrication, and assembly. Depending on the preference of the people on your team, you may split people into different, less broad groups. Some teams have “build leads” or “prototyping leads”. On 2169 we have two or three “Mechanical Heads” that decide which aspect of mechanical they will be leading, and delegate students of their department accordingly.&lt;br>&lt;br>
        The Mechanical Department, more so than other departments, works very closely with CAD. In fact, on our team, the CAD department is made up almost solely of members who are also a part of the Mechanical Department. Whether members of the mechanical department are involved in CADing or not, members of the mechanical department should have a good understanding of mechanisms and how they function, as they will be designing them in CAD and/or building them. In CAD, the robot is given a theoretical shape, made up of individual parts that have been assembled. The mechanical department makes those parts.&lt;br>&lt;br>
        The Mechanical department also communicates with the strategy, programming, and electrical departments.&lt;br>&lt;br>
        The strategy department, which may include members from other departments such as mechanical, is heavily involved in strategizing what the robot your team will be building should do. The Mechanical department will be helping to design and fabricate what the strategy department formulated.&lt;br>&lt;br>
        The electrical department and the mechanical department are the two departments that have physical components on the robot, and they must share space on the robot. They have to ensure everything has a place on the robot.&lt;br>&lt;br>
        The programming department codes the things the electrical department installs on the robot. Because of this, the programming department needs to know what they are going to program. They will have to communicate with the CAD, electrical, and mechanical departments to know what they will be accomplishing.&lt;br>&lt;br>&lt;br>

        Responsibilities of Heads/Leaders in this department:&lt;br>&lt;br>
        Help guide the design phase of the robot to keep it feasible and formulate robot design options for the team to decide upon. The options should be based on goals for the robot based on the competition and team member input during design week.&lt;br>&lt;br>
        Represent Mechanical department at meetings with details of work completed since last meeting and the goals for the future.&lt;br>&lt;br>
        Communicate with Electrical and Programming Heads to guarantee their needs are met by the mechanical design and to coordinate cross-departmental systems.&lt;br>&lt;br>
        Determine tasks and add them to project backlog&lt;br>&lt;br>
        Assign tasks to Department Members&lt;br>&lt;br>
        Guide work of Department Members to ensure they are properly performing tasks&lt;br>&lt;br>
        Attend build sessions as much as possible&lt;br>&lt;br>
        Potentially communicate with external fabricators and coordinate delivery of materials and CAD specifications for fabricated parts&lt;br>&lt;br>
        Help determine materials and parts that must be ordered for robot at earliest stage possible&lt;br>&lt;br>
        Make sure that the CAW is up to date and ready for submission at competitions&lt;br>&lt;br>
        Train younger members to fill your shoes when you leave&lt;br>&lt;br>&lt;br>

        Desired Experience and Skills:&lt;br>&lt;br>
        Good communication skills&lt;br>&lt;br>
        Ability to respectfully receive and consider input and ideas from department members&lt;br>&lt;br>
        Proven aptitude for designing and/or building mechanical systems&lt;br>&lt;br>
        At least a working knowledge of CAD software and CAD design process&lt;br>&lt;br>
        Advanced knowledge of using machinery to fabricate parts </item>
        <item/>
    </string-array>
    <string-array name="mech_protoype">
        <item>fragment_pager_item_no_image</item>
        <item>Prototyping like a Pro</item>
        <item>Prototyping is an important part of building and FRC, as well as almost anything that is created with constraints. Smart prototyping allows your team to accurately gauge potential final product effectiveness. Making most of what prototyping can offer is very hard, especially since you only have six weeks to build a robot. Time spent on prototypes can mean less time working on robots.&lt;br>&lt;br>
However, effective prototyping can lead to less time spent on the actual robot because you may solve problems in the prototyping phase, long before you would have with an already constructed robot.&lt;br>&lt;br>
Members in the electrical and programming departments should also be involved in prototyping, especially if a drivetrain is involved. The electrical department would be soldering/crimping/attaching wires to the motors, or installing a compressor to use for pneumatics. The programming department would be involved in programming the drivetrain, or if you want to, any prototypes you make, especially if you want to change motor speeds by providing different amounts of wattage.&lt;br>&lt;br>
Because of the cross-department play here, your entire team must be on board with the designs you want to test. It is important to have all the technical departments together during the design phase because each department has different concerns. But you must also work together. This is a team effort.&lt;br>&lt;br>&lt;br>

Concepts Regarding Prototyping&lt;br>&lt;br>
To conserve money, most prototypes teams make are constructed out of wood since it is much cheaper than metal. However, if possible, you want the materials interacting with a game piece to be as accurate to what you plan to use on your final product.&lt;br>&lt;br>
If you initially plan to power the mechanism with a 775 pro but find in testing that a BAG motor works better, use a BAG in the final product. If you initially test the Kit of Parts wheel as a shooter wheel but find that AndyMark\'s rubber wheels work better, use them on your final mechanism. The construction of your prototype at it’s peak performance should be as close as possible to your final robot’s design.&lt;br>&lt;br>&lt;br>

Strategy and Prototyping&lt;br>&lt;br>
In your strategy/design meetings, when you concluded discussion and decided what you want your robot to accomplish, you will naturally lead into a discussion on what mechanisms will accomplish your goal. Wheeled shooter or catapult? What kind of intake do you want? Pneumatic shooter or motor powered? These are questions prototyping can answer.&lt;br>&lt;br>
If there is a disagreement or curiosity between two or three (more than three can be too large of an endeavor unless you have a large build team) designs and their advantages, design and build a prototype of each one and test them against each other. Make sure you test them in the same environment. Like any scientific experiment, you want to limit the amount of variables. The only variable in this experiment should be the mechanism being tested.&lt;br>&lt;br>
Another thing to look into is researching past FIRST games and designs for effective robots. Many teams in 2011 looked back to high performing designs from 2007 and emulated them. Many 2016 designs harken back to 2012, especially non-low bar robots. Using past games to inspire designs is a great way to preemptively gauge how some mechanisms will perform.&lt;br>&lt;br>&lt;br>

What Should you Prototype?&lt;br>&lt;br>
You can prototype a lot of things for a robot, and if you “over-prototype,” you risk spending too much time. It is important to understand what you should prototype. Let’s explore the various parts of a robot and how you may want to go about prototyping them:&lt;br>&lt;br>
Drivetrain: In most cases, you should not need to prototype your drivetrain. One of the principles of drivetrain selection is choosing a drivetrain that is accessible--easily designed, fabricated, and assembled--to your team. The accessibility of a drivetrain is important because the rest of your robot is going to be built around your drivetrain. The design for it should be made early, and the final should be built first, as you can even test prototypes using the actual, final robot’s drivetrain. If you plan on using the Kit of Parts drivetrain, you can quickly assemble it or a modified version (i.e. Team 1114’s “Kitbot on Steroids”) and use that for prototype testing. The image to the right is a picture of our 2016 drivetrain with our shooter prototype mounted to it. However, some types of drivetrains or aspects of drivetrains may benefit from prototyping. The drivetrain in the same picture was a result of prototyping. We tested different wheels, such as VexPro’s traction wheels, and found that these wheels would work best with our design.&lt;br>&lt;br>
	If you have an ambitious drivetrain or a drivetrain you are trying out for the first time, you will want to test it first. However, build season is usually not the best time to make a drivetrain your team has never built before, especially if it is a very ambitious one like a swerve drive. Because of this, it is best to build and test these ambitious drivetrains in the off-season.&lt;br>&lt;br>
	Remember, drivetrain prototypes do not necessary need to be powered. They can just be wheels that are free rotating, mounted on some wood bracings. The picture on the right is one of our to-scale prototypes of our 2010 drivetrain. Nothing is powered. It is simply mimicking how the drive may look and act.&lt;br>&lt;br>
Intake: The intake of your robot is often defined by how your drivetrain is designed and by what game pieces you are dealing with. After analyzing the size and shape of the game piece, your design crew will come up with a mechanism or two that can accomplish the task of grabbing one of these pieces and transporting to to where it needs to go. It is the job of the prototype team to test the intake by constructing a primitive version of it. The main goal with the prototype intake is to test if it, indeed, succeeds at grabbing the game piece, and if you can increase its effectiveness by changing the material of the intake. If you have two different types of traction wheels, test them on the intake to see which one is faster. Is your game piece sometimes getting out of alignment or stuck in a corner? Try mecanum wheels or an archimedes screw orientation of tread. Those two designs are effective at centering ball game pieces.&lt;br>&lt;br>
Shooters: Many FIRST games nowadays involve shooters. Shooters are finicky. Many calculations go into them, such as angle and speed. To begin, test different types. Teams have successfully used both wheel shooters and catapults. If both could potentially be successful (like in 2016 or 2014), test both. This is where the finicky part comes into play. You will have to focus many different variables to optimize your shooter.&lt;br>&lt;br>
For wheeled shooters, you can go in many different directions, such as a dual wheel or single wheel. Once you have your shooter prototype made, test different speeds, different angles, different motors, different wheels, different compression on the ball, and anything else your team might want to test. It is important to make your prototypes easily adjustable. The less time wasted on changing variables, the more time you have to test them.&lt;br>&lt;br>
Catapults, like wheeled shooters, can be achieved through different methods. Some teams like powering them with motors (examples include the “choo choo” style design, or simply powering one through gears/chain/belts with a mechanical or programmed stop). You could also make a pneumatic catapult, especially in games with lighter game pieces. Like wheeled shooters, there are many variables to change, like the length of the catapult arm, the angle, different pistons (bore and pitch), speeds of the motor, and the amount of elastic force if you’re using elastics.&lt;br>&lt;br>
There are many other methods of shooting. These are just two common types. You may design a completely new way. But with all these shooters, there remains one constant fact: there is a lot of fine-tuning involved to maximize effectiveness. It is vitally important if you have a shooter mechanism on your robot that you prototype it and test it. Few things are as disheartening as skipping shooter prototyping, than later finding out the final product doesn’t work as intended.&lt;br>&lt;br>
Arms: In games that involve arms, such as 2011 and 2007, arms double as your intake. What is important about intake prototypes are important for arms: the effectiveness of the object used to grab your game piece. Arm designs can use wheels as an intake, an actuated claw, or both. The second thing to look at is how the claw is actuated and how you will achieve that. Teams have used elevators, actuated  joints, or actuated arms on elevators! Prototyping an elevator can be tricky. Our team in 2015 did not prototype our elevator lift, but we did design it thoroughly in CAD and do the calculations on the load that the motors will be under when we are stacking totes. Actuated joints are generally easier to prototype as they can be made with a few bars of wood and a motor driving a joint. But what you should accomplish with an arm or elevator prototype is perfection of motors, ratios, and speeds. Arms and elevators require precision. Helping your drivers as much as you can in the prototyping phase is important. You also will need to test to calculate whether you will even be able to lift the game pieces.&lt;br>&lt;br>
	These are by no means every mechanism used in FIRST. There are so many other mechanisms created every year. Many of them, like 2007’s ramp transformers or 2015’s can burglars, are game specific. For these mechanisms, it is important to prototype them and prove that they can be accomplished and are effective.&lt;br>&lt;br>

Here is a general list of things that should be done for prototypes.&lt;br>&lt;br>

Before Building a Prototype&lt;br>&lt;br>
	After your team has decided the strategy you want to pursue and have formulated possible mechanisms to achieve that goal, you should begin your prototype with some math. Eric Husmann’s comment perfectly outlines this process. It is here that you make the calculations. Calculate the angle you think your catapult should be at to shoot the ball from the certain distance away. Calculate the amount of load that will be under an elevator’s gearbox and adjust what gearbox and motors you should use.&lt;br>&lt;br>

Build the Prototype to those Calculations...&lt;br>&lt;br>
	...But build them to be able to adjust what you will want to try changing. For a single wheel shooter, you may want to try different exit angles. As such, make a hood that can change the angle.&lt;br>&lt;br>

Test, Test, Test….. And Adjust the Variables&lt;br>&lt;br>
	See if you can increase the effectiveness of the mechanism by changing things. However, do this one variable at a time. For a shooter, perfect the angle at the desired distance, then see if different motor speeds will speed it up or make it more consistent. Or change the wheel and see if that has an effect. The picture on the right is the testing of a shooter prototype. The stack of totes and bin is our makeshift goal as the field elements were not done yet. The field elements are important, but they may take a while to make. In the beginning stages, use materials you have to mimic them as closely as possible.&lt;br>&lt;br>

When Satisfied…&lt;br>&lt;br>
When you are satisfied with the results, take the best iteration and apply that to the robot’s final design as closely as possible. With the information you have gained, the robot will be more effective and require less tampering with once it is built.</item>
        <item/>
    </string-array>
    <string-array name="mech_tools">
        <item>fragment_pager_item_no_image</item>
        <item>Tools for your Workspace</item>
        <item>With so many tools available in the world, it can be hard to decide which tools will be useful for FRC purposes? Here are some general principles for tools:&lt;br>&lt;br>
You will want to be able to have as many abilities at competition as you can. Portable tools are important. &lt;br>&lt;br>
Have a solid organization system. Without one, tools can easily get lost. &lt;br>&lt;br>
Below is a list of tools that we feel are essential to an FRC team, with a minimum recommended quantity (it is assumed “one” unless specified otherwise). Some sections are split into essential tools that we use often, additional ones if you have the funds, and the luxury items that large FRC teams enjoy.&lt;br>
This is by no means the definitive list of all tools that can be useful. You may find tools that work very well for your team. This is a list that either we on KING TeC have used or other teams have generally used and view fondly.&lt;br>&lt;br>&lt;br>

Measuring&lt;br>&lt;br>
Tape Measure (>2): tape measures are great for measuring longer lengths, like a drivetrain rail or a long manipulator. Two rolls of two different widths (1” and ½”) are sufficient, but the more the merrier.&lt;br>&lt;br>
Speed Square (>1): great for marking perpendicular lines because of the lips at one end. As well as marking straight, perpendicular lines, it can also measure whether something is at a right angle during assembly.&lt;br>&lt;br>
Caliper (>1): Calipers are great for measuring precise lengths. They come in dial or digital, and it is up to personal preference which one is better. &lt;br>&lt;br>&lt;br>

Marking&lt;br>&lt;br>
Scribe (>3): A tool that has a sharp tip at the end that can make clear marks in metal. This tool is vital for knowing where you will need to cut metal once you have measured it. When the team is busy fabricating parts of the robot, a scribe will be used very often, so having an ample amount is important.&lt;br>&lt;br>
Center Punches(>3): Used for marking where holes will be drilled. Force is applied to the metal and a small mark is made that doubles as a mark where the hole should be and guides the drill during the drilling process.&lt;br>&lt;br>
Manual: requires a hammer&lt;br>&lt;br>
Snap Punch: does not require a hammer because it is spring loaded&lt;br>&lt;br>
Transfer: requires hammer. Used to go through other holes of the same size to reach a spot to mark. Transfer punches are made for specific hole sizes&lt;br>&lt;br>&lt;br>

Cutting&lt;br>&lt;br>
The Essentials&lt;br>&lt;br>
Band Saw: Band Saws, as far as cutting tools are concerned, strike the perfect balance between effectivity and price. You will need one that can cut wood, polycarbonate, and aluminum. If possible, get one that can cut steel, but those can be much more expensive. A band saw with adjustable speeds is also recommended.&lt;br>&lt;br>
On 2169 we have a Grizzly G0640X, which has been completely satisfactory. Its has an adjustable speed and comes with a side shield and miter for keeping cuts straight&lt;br>&lt;br>
Dremel: a small, handheld cutting machine that works for performing small and particular cuts, especially when the pieces being cut are already on the robot. Always have replacement cutting bits because they can break quite easily. Especially since they are generally for softer materials.&lt;br>&lt;br>
Hacksaw: The non-powered alternative to cutting. If you do not have immediate access to the band saw and something may be too dense for the dremel to cut effectively, a hacksaw can work.&lt;br>&lt;br>&lt;br>
The Additionals&lt;br>&lt;br>
Chop Saw: The chop saw is great for cutting long pieces of metal tubing and other long, narrow materials. It does the job much quicker than a band saw. Unlike a band saw, there is no limit to the length of what you are cutting because their is no neck to get in the way. Chop saws usually do not cut sheet metal well.&lt;br>&lt;br>
Manual Mill: A manual mill is a cutting/drilling machine that is used to get a much more precisely made product. Instead of moving material by hand, you can adjust the position with three handles, one for each plane.&lt;br>&lt;br>
Manual Mills are quite pricey. 2169 uses the Bridgeport mill that is in our school’s metal shop, the same one used in their IT classes. Because of their price, we suggest that if you do not already have one at your disposal, that you save up for a CNC mill, which costs quite a bit more, but is quite a bit more useful.&lt;br>&lt;br>
Manual Lathe: Lathes are used for cutting and shaping rounder materials, such as an axle. The material is spun and a cutting tool is used to shape the material that is being spun.&lt;br>&lt;br>&lt;br>
The Luxuries&lt;br>&lt;br>
CNC Mill: a CNC mill is a milling machine that is automated. If functions using installed software and reads CAD files. CNC mills are very pricey, but with the funds, they are very much worth the price.&lt;br>&lt;br>
CNC cutting machines come in all different types. On 2169, we have an X-Carve from Inventables. But there are other CNC cutting machines such as:&lt;br>&lt;br>
Water Jet Cutters&lt;br>
Laser Cutters&lt;br>
CNC Lathe: the same principle as a CNC mill, but a lathe.&lt;br>&lt;br>&lt;br>

Drilling&lt;br>&lt;br>
The Essentials&lt;br>&lt;br>
Hand Drill (>1): Hand drills (cordless) are great for most hole drilling applications. You will want more than one because multiple kids may be working on different parts of the robot simultaneously and may need a hand drills.&lt;br>&lt;br>
Drill Press: A hand drill is not always powerful enough for some drills. A hand drill’s chuck may not even fit larger bits (½” and up). If you are going to be drilling something like bearing holes, you will need a drill press.&lt;br>&lt;br>
On 2169 we have a JET JDP-17MF/354169. It has adjustable speed and power. We also have a smaller Ryobi tabletop drill press for when two drill presses are needed.&lt;br>&lt;br>
If you get two drill presses, get one smaller, weaker one and one larger, powerful one. It will save money and space.&lt;br>&lt;br>
Drill Bits (Many of each important size): drill bits are one of the most used tools as they are used in both a hand drill and a drill press. The most often sizes include 5/32, 3/16, ¼, and 1-⅛.&lt;br>&lt;br>
Tap Set: A tap set is an often forgot but very important tool. It is used to turn a regular hole, like a churro bar or an axle, into a threaded one that you can run a bolt through. This makes assembly of things much easier.&lt;br>&lt;br>
The Additionals&lt;br>&lt;br>
Machine Broach: Because of the nature of drill bits or end mills, drilling is limited mostly to circular holes. But sometimes, you may want a hole of a different shape, such as a hexagon for hex shafts. A machine broach is a tool that carves through a hole to change the shape. Each shape has its own broach.&lt;br>&lt;br>
On 2169, we rarely use any other broach than a ½” or ⅜” hex broach because most other shapes are not commonly used in FRC.&lt;br>&lt;br>&lt;br>




Bending&lt;br>&lt;br>
The Additionals&lt;br>&lt;br>
Brake: A brake is used for accurately and cleanly bending sheet metal to a desired angle&lt;br>&lt;br>
Benders: There are a variety of tools that enable you to bend metals, from square tubes to circular tubes.&lt;br>&lt;br>
The Luxuries&lt;br>&lt;br>
CNC Brake: Some teams, like 148, have CNC brakes that have programmed angles to bend sheet metal tool. This makes fabricating a purely sheet metal robot, which 148 usually does, much easier.&lt;br>&lt;br>&lt;br>

Joining
(generally, one or the other)&lt;br>&lt;br>
Rivet/Rivet Gun: teams can join pieces of metal by riveting the two together with gussets or brackets that are attached to both pieces of metal.&lt;br>&lt;br>
On 2169 we prefer riveting because it is much easier to do at competition. Welding is not typically allowed in the pits at competition&lt;br>&lt;br>
Welding: Welding is another method of joining metals together. Traditionally, you will want aluminum welding materials because aluminum much more common in FRC. However, having the capabilities of steel welding can also be beneficial. It is possible to weld aluminum without a welder if you use a propane torch, but results can be messy.&lt;br>&lt;br>&lt;br>
The Additionals&lt;br>&lt;br>
Pneumatic Rivet Gun: These rivet guns, attached to a pneumatic compressor, are very powerful. Riveting ¼” rivets by hand is nearly impossible, and pneumatic gun makes them much easier to use.&lt;br>&lt;br>&lt;br>

Filing and Smoothing&lt;br>&lt;br>
The Essentials&lt;br>&lt;br>
Belt Sander: Used to smooth edges and remove a small amount of extraneous material.&lt;br>&lt;br>
We have a Belt/disk combo. If the funds do not exist for that caliber of machinery, just one or the other will work.&lt;br>&lt;br>
File (>4): Files are used to remove burrs on edges of cut metal. You should get many different sizes of files because some situations may require a smaller file, or some edges may be somewhat rounded.&lt;br>&lt;br>
Deburr (>3): Deburrs are used to remove burrs from drilled holes. Have extra deburr bits because they can break.&lt;br>&lt;br>&lt;br>
The Additionals:&lt;br>&lt;br>
Bench Grinder: A bench grinder is like a belt sander on steroids. It can shape, sharpen, smooth, or polish just about any metal material you would ever use in FRC.&lt;br>&lt;br>&lt;br>

Fastening&lt;br>&lt;br>
Screwdrivers (>3): You are going to want screwdrivers for certain bolts, especially bolts on electrical components. Flathead and phillips are most common. You should have them of various sizes and lengths too. Electrical components have very small bolts, while mechanical bolts will be larger.&lt;br>&lt;br>
Allen Wrenches (>4): Allen wrenches are also very commonly used in FRC, as installation bolts from gearboxes are often allen wrench bolts. As such, you should have at least 4 US allen wrench sets. You should also have some metric allen wrench sets just in case.&lt;br>&lt;br>
Wrenches (>5): Wrenches are also commonly used for hex head bolts. Your team is going to need wrenches. There are various types of wrenches to consider.&lt;br>&lt;br>&lt;br>
Regular: The most traditional&lt;br>&lt;br>
Ratcheting: Configured like a traditional wrench, but it ratchets, alleviating some of the pains of using a traditional wrench.&lt;br>&lt;br>
Socket: Attach sockets of a certain size to a socket handle. It ratchets as well&lt;br>&lt;br>
Impact Driver (>1): A powered, handheld device that can aid in fastening and unfastening.&lt;br>&lt;br>
Bolt Cutter: Sometimes a bolt will get stuck somewhere and you will not be able to get it out. You will need a bolt cutter for this. Bolt cutters allow you to clip a bolt in two.&lt;br>&lt;br>

Clamping&lt;br>&lt;br>
Vises&lt;br>&lt;br>
Vise Grips (>3): vise grips are one of the most versatile handheld tools. If you need a strong grasp on something for more leverage, a vise grip will work. Having multiple is important because some applications may require more than one. The more vise grips, the merrier. And get them in various sizes. Some applications may favor a narrower nose.&lt;br>&lt;br>
Drill Press Vise: a drill press vise will help stabilize the object being cut on the vise. Without one, the material may very easily spin with the drill bit.&lt;br>&lt;br>
Table Vise: A table vise is important because it is firmly mounted on a worktable. Clamped objects will not move, which is useful in a wide variety of situations.&lt;br>&lt;br>
Drill Press Clamp(>1): Another useful tool for stabilizing something cut on the drill press.&lt;br>&lt;br>
C Clamps (>3): Clamps that can be used to clamp two pieces of metal together to to a table. Like a vise grip, a c clamp has a variety of possible uses. Ones of various sizes are preferred.&lt;br>&lt;br>
Needle Nose Plier (>3): Pliers have many possible functions.&lt;br>&lt;br>&lt;br>

Blunt Force&lt;br>&lt;br>
Hammer: Useful in a wide variety of situations. Used for stronger applications.&lt;br>&lt;br>
Mallet: Useful in many situations as well. Used for applications where less centralized/weaker force is needed.&lt;br>&lt;br>&lt;br>

Chain&lt;br>&lt;br>
Chain Breaker: A tool that helps you break chain.&lt;br>&lt;br>
Chain Puller: A tool that helps you pull chain closer so you can link them together.&lt;br>&lt;br>
Masterlink: The connecting link for two ends of chain.&lt;br>&lt;br>&lt;br>

Electrical&lt;br>&lt;br>
Soldering kit: For the electrical components on the robot, you will need a soldering kit to join wire to a motor or to other wire.&lt;br>&lt;br>
Heat Gun: to be used on shrink wire wrap.&lt;br>&lt;br>
Wire Stripper: A wire stripper will allow you to simply expose the end of a wire for soldering, crimping, etc.&lt;br>&lt;br>
Diagonal Cutter: Cuts Zip ties and wires very easily.&lt;br>&lt;br>
Crimper: You will need a crimping tool to attach wire connectors.&lt;br>&lt;br>
On 2169 we use Anderson Connectors, and we recommend teams do the same. As such, an Anderson Crimper is suggested for crimping for Anderson connector.&lt;br>&lt;br>&lt;br>

3D Printing&lt;br>&lt;br>
3D printing is becoming a more and more popular item for FIRST robotics teams. For FRC, they are often used to print custom spacers or electrical mounting plates. Of course, 3D printers are not completely necessary, but they have become an expedient solution to many problems for teams with access to them.&lt;br>&lt;br>&lt;br>

Other&lt;br>&lt;br>
Vacuum: Keep your workspace clean!&lt;br>&lt;br>
Compressor: Can be used if your have a pneumatic rivet gun or if your robot has pneumatic tires. Note that compressors are generally not allowed in the pits at competition&lt;br>&lt;br>
Gear Puller: Helps you pull stuck objects off a shaft easily, such as a gear.&lt;br>&lt;br>
PVC Cutter: Cuts PVC. PVC can easily be used for intake rollers.
</item>
        <item/>
    </string-array>
    <string-array name="mech_week1">
        <item>fragment_pager_item_no_image</item>
        <item>Mechanical Week 1</item>
        <item>The first week of build season is an important one for every department, the mechanical department included. What the department will be doing depends on how many people you have at your disposal, and how many adults--mentors or simply students’ parents--are willing to chip in. The following a list of things the Mechanical department should get done or consider. If you have a large mechanical department, you can split into groups to accomplish these tasks separately. If not, you will have to be able to multitask:&lt;br>&lt;br>&lt;br>

Design Process&lt;br>&lt;br>
	Along with the strategy, electrical, programming, and CAD (if you have one) departments, the mechanical department should contribute in deciding what you want the robot your team will make to do.&lt;br>&lt;br>
Do you want the robot to focus on pure offense?&lt;br>&lt;br>
Is there an endgame task you want your robot to accomplish?&lt;br>&lt;br>
How important is this endgame task? How many points does it award you?&lt;br>&lt;br>
Do you want to focus on defense? Is there even defense?&lt;br>&lt;br>
Do you want to try to do everything?&lt;br>&lt;br>
We recommend you have highly sophisticated machinery or machining sponsors and a strong grasp of every mechanism you want to design for this task. “A jack of all trades; master of none” applies very well to FRC. If unprepared, trying to go for every task in the game can end with underwhelming results. The teams that can do everything consistently every year are veteran teams with strong sponsor support.&lt;br>&lt;br>
What kind of drivetrain will work well in this game and help our strategy?&lt;br>&lt;br>
	Each department has a special skill that is vital to the design process. The mechanical department’s role in the designing process is to have an idea of what the mechanical department can accomplish. If someone proposes a design that would be too difficult for the mechanical department to accomplish, the department should work to try to change the design to a more accomplishable goal. This is true for other departments as they should also be acting as a check on the designs, adding their input regarding the abilities of the department, determining whether a design or goal is feasible.&lt;br>&lt;br>&lt;br>

Shopping?&lt;br>&lt;br>
	If you do not have very many materials going into build season, you are going to NEED to purchase things during week one, especially the desired products from VexPro or Andymark. Products from FIRST suppliers go out of stock very quickly. Many products may even go out of stock on the first day of build, or before the build season even starts! Like the high traction Banebot Wheels in 2015, they may not even go back in stock until AFTER the build season, or even until after competitions end. Because of this, your team has to be ready to purchase things you may need quickly.&lt;br>&lt;br>
It is hard to decide this early what you will need because your team most likely hasn’t finalized the design yet. As such, you will need to predict some product’s effectiveness. For example, in 2016, many teams purchased pneumatic wheels on kickoff day because they foresaw that these wheels would be effective. If your team sees a particular product being very effective, like pneumatic wheels in 2016, purchase them before they go out of stock.&lt;br>&lt;br>
In our team, we like to make a pre-build season purchase, where we take inventory of what we have, and what we think we will need. This includes tools we think will increase productivity, metal that we think we will use and don’t already have enough of (sheet metal, VexPro versachassis, L stock, etc.), any electrical components you will need (motor controllers, control modules, etc.), and wheels. Over the years, your team can build up its inventory of materials.&lt;br>&lt;br>

Once you solidify what prototypes you will be making, purchase any materials that will help you build and operate these prototypes, such as wood, wheels, pneumatic solenoids and pistons (we use Bimba products), and any motors you do not have. You will want these products as quickly as you can, so getting priority shipping is important. Priority shipping is why we like to purchase products before build season: priority shipping can be expensive, but you need products as soon as possible. Having them beforehand can be very beneficial.&lt;br>&lt;br>

Make sure you keep track of what you are buying (and how expensive it was) so you can document what you end up using on your CAW (Cost Accounting Worksheet). The CAW is for documenting the cost of the robot you will end up making, and robot inspectors will want to see it. Accurately documenting your purchases and what ends up on your robot is important for that reason.&lt;br>&lt;br>&lt;br>

Start Prototyping&lt;br>&lt;br>
	Once a strategy and design is decided upon, it’s time for mechanical to shift into full throttle. Depending on if you use CAD or not, there are a few things that the mechanical department can do:&lt;br>&lt;br>
  Your team does not plan on using CAD&lt;br>&lt;br>
	Without CAD,  the mechanical department can get into prototyping immediately. Because there is no CAD department to check and make sure the prototypes are progressing well, it is the mechanical department’s job to make sure the members of the department are reaching this goal.&lt;br>&lt;br>
  Your team does plan on using CAD&lt;br>&lt;br>
	Oftentimes, those in the mechanical department/branch also help with CAD. If that is not the case and your team has a dedicated CAD department, then mechanical will just have to communicate closely with the CADers rather than participate in making the design electronically. Since it is important to get a prototype as close to the final product as possible, the two departments will have to communicate frequently on progress and plans so the prototype can accurately reflect the goal and design of the robot that will eventually be built based on the findings in the prototype phase.&lt;br>&lt;br>

Prototyping will probably overflow into the second week. Most prototypes should be built by the end of the first week, but fine tuning will most likely be done well into the second week.&lt;br>&lt;br>

Check the dedicated article about prototyping for more information regarding effective prototyping.&lt;br>&lt;br>&lt;br>

Drivetrain&lt;br>&lt;br>
	In most cases, the drivetrain should be the first choice that is made for a robot. Generally, teams like to stick to what they know, and most know tank drive style robots. But given that the drivetrain is the base for which everything is designed around, the decision for how it will be shaped is an important one, and should be an early one. In fact, the earlier your design is done and assembled, the better. Prototypes benefit from being tested on a drivetrain as close to your final one as possible. Your team may want to start building your drivetrain during week 1. If you are using the kit of parts or a variation on it (i.e. 1114’s “Kitbot on Steroids”), it should be quite easy to get it assembled quickly. No worries if  the building of your drivetrain is held up until week 2, especially in a game that may require a more particular and thought out drivetrain, like 2016 or 2010, but as already stated, the earlier it is designed and done, the better.&lt;br>&lt;br>

Engineering Notebook&lt;br>&lt;br>
	Engineering notebooks, while not required in FRC, are a great thing to strive to to. Engineering notebooks can really help teams win engineering awards at competition (Industrial Design, Innovation in Control, Creativity, Engineering Excellence, and Quality). In the engineering notebook, you document your progress, like building and testing. As far as awards are concerned, judges will be most impressed with analytical things rather than monotonous and obvious tasks like fabrication or assembly. They like things like documentation of CAD simulations or tables showing all the testing you did to tune a shooting mechanism.&lt;br>&lt;br>
	The picture to the right is an example of a CAD simulation 2169 did in 2016 regarding the force that our drive rails would experience after jumping over the game’s rock wall.&lt;br>&lt;br>
	It is important to keep up with your engineering notebook. One thing 2169 has done is to assign people to a certain date to fill out. They will have to get data on the different departments and what progress was made. Remember to take as many pictures as you can throughout build season. If people forget to update the notebook, you will at least have pictures to fall back on and jog your memory.&lt;br>&lt;br>&lt;br>

Building Field Elements&lt;br>&lt;br>
	The game FIRST releases every year is different, with different scoring receptacles or field obstacles. To accurate test your mechanisms and robot, it is best that you have the applicable field elements to test on. The game manual released at kickoff will have drawings for all the field elements in the game. With these drawings, you can build the field elements necessary for the game.&lt;br>&lt;br>
	Some very high budget teams like 118 purchase field elements every year. However, most teams do not enjoy such privileges. As such, they must build their own field elements. The picture on the right is the tower we build for testing for 2016.&lt;br>&lt;br>
Team’s generally use wood to build the field elements since its cheap. In 2016, the parents of our team members pitched in and built the defenses for FIRST Stronghold so we could focus more on designing a robot and prototyping. If volunteers are willing to help your team with making field elements, gratefully accept the request. You do not want to fall into spending too much time on field elements.&lt;br>&lt;br>
Depending on the year, it will take a different amount of time to get all your desired field elements constructed. Some games, like 2016’s FIRST Stronghold, have a large amount of field elements. Some games, like 2014’s Aerial Assist, have a small amount of field elements. It is important to note, especially in games with a lot of elements like 2016, that you do not need to make elements you decide not to deal with. For example, in game like 2010 where an end game option was hanging, imagine that you opt out of hanging. There is no need to waste time constructing something you are not going to deal with. If you, later in the build season, find that you have time to design a hanging mechanism, go for it. Create the hanging bar, calculate, and test.&lt;br>&lt;br>&lt;br>

Practice Bot?&lt;br>&lt;br>
	Generally, larger teams like to make two robots every year, one competition robot and one bot to practice on. This allows the team to practice and make adjustments even after the six weeks. While your competition robot sits in a bag, your team can continue to make improvements. However, this does mean you will have to quickly make these adjustments on your competition robot when you get to your competition.&lt;br>&lt;br>
	That said, practice robots can be very effective. However, they can also be very expensive, as you will have to spend twice as much money. And the most spendy parts of a robot are the electrical components ($435 for a RoboRio, $200 for a Power Distro board, etc.), which are the hardest parts to work around when designing a practice robot under constraints.&lt;br>&lt;br>
Under strict budget restrictions that many teams have, teams may have to pick and choose what to do for their practice bot. You are not required to make the practice robot exactly the same as the competition robot or run them the same way. Your “practice robot” may just be your prototypes strapped to a drivetrain.&lt;br>&lt;br>
	But it is important for your team to decide early on what you will do and how you will do it. If you are not planning to have very many mechanisms and think you can build the robot quickly enough, you may not feel the need to have one. But if you do not think you will get to everything you want to build in six weeks, having something to test and practice with is important.&lt;br>&lt;br>
	At the very least keep the prototypes that ended up being emulated on the robot as they can act as a bare minimum testing device.&lt;br>&lt;br>
As a takeaway, here’s a list of options you may have regarding an identical practice bot:&lt;br>&lt;br>
Go back and forth between comp and practice bot, but do practice bot counterparts first: this allows you encounter problems before you start building the competition bot and fix those problems for the competition robot. If time or build structure is poorly managed, this may result in the competition robot being neglected. However, It can allow testing and building to occur simultaneously. If need be, you can turn the practice bot into the competition robot.&lt;br>&lt;br>
Build them simultaneously: This generally requires more people working on the robot, so it may not work well for small teams. This method allows the team to build faster, but the advantage of troubleshooting problems on the practice bot before starting the competition robot is taken away.&lt;br>&lt;br>
Build practice robot after bag and tag day: Allows you to get the competition robot done quicker and do testing on that robot. The practice bot is not bounded by bag and tag day. However, this does require heavy fabrication after bag and tag, when you may desire to use the days after bag and tag for just testing, improving, and practicing.
</item>
        <item/>
    </string-array>
    <string-array name="mech_week2">
        <item>fragment_pager_item_no_image</item>
        <item>Mechanical Week 2</item>
        <item>Week 1 focused on the strategy and what you want the robot to do. Week 2 focuses on solving the “how.” Prototyping started in week one, but it’s unlikely that everything got done. Most of week one was spent on the prototypes and field elements. There may not have been much time at all for testing. Week two will focus on whatever was not accomplished in week 1.&lt;br>&lt;br>&lt;br>

        Prototyping&lt;br>&lt;br>
        Week 2 should focus on testing prototypes. Have the prototypers test whatever prototypes they get done. If some teammates are not done with there’s, try to get them done in early in the week so they can test. Gauge what prototypes have priority. If you have a drivetrain prototype, that takes utmost priority, as any drivetrain situation should be figured out as early as possible because changes in the drivetrain can affect everything else along with it.&lt;br>&lt;br>
        As they are testing, they should be changing things, such as materials, motor speeds, or pneumatic piston angles. This will allow them to test what works best. With that information, you should apply the best results to the final robot.&lt;br>&lt;br>
        If you have a drivetrain already constructed, an added benefit to prototyping comes into play. If you have your drivetrain done, you can see how a prototype will fit on the drivetrain, and you can even test the prototyping on the drivetrain. This will give you information regarding the structure of these components. If the mechanisms need structural altering, it would be here where you learn that. Although, it is likely that your drivetrain will not be fully constructed. Your build team was or is busy with prototype and prototype testing, and that’s alright. These structural alterations can be incorporated into week 3 with little hassle. The CAD department, if you have one, would also discover and solve the exact problems you would learn from putting your prototypes on a drivetrain.&lt;br>&lt;br>
        Reference the article dedicated to prototyping for more information.&lt;br>&lt;br>&lt;br>

        Robot Design&lt;br>&lt;br>
        With the information gained from prototyping, you can solidify what you want your robot to look like. The electrical (control systems) and programming department were also likely involved in prototyping, they are likely up to speed with the information retrieved from prototyping. If not, inform them, because it will be the programmers task to program the things you test, and the electrical and mechanical departments will have to work together to allocate where each part of the robot is going to go. Traditionally, the electrical department has to work around what the mechanical department does because of the nature of each department’s products (the mechanical department is making the mechanisms which depend greatly on where they go to work properly. As long as the electrical can fit their electrical board, the robot will work fine). However, both parts are necessary for your robot, so the mechanical department can not be so greedy and take up every spot where electrical could potentially and easily install the electrical components.&lt;br>&lt;br>
        This may also be a moment where the mechanical department will work with the business department. Traditionally, teams reward their sponsors by putting the sponsor’s logo on their robot. The mechanical department should work with the business department to free up room to put a sticker or polycarb sheet that can bear the logo of the team’s sponsor(s). This aspect of the robot would be the easiest thing to change in the future, so if your team is unsure where to put the logos, it is alright to bypass this during week 2. However, it is important to show your team’s gratefulness for your sponsors, so you will want to do this at some point.&lt;br>&lt;br>&lt;br>

        Some things to note for final design:&lt;br>&lt;br>
        Remember to design it to be maintained. If you have worries about something being placed in such a way to limit maintenance, try to find a better spot for it. Murphy’s Law still applies in robotics. Design so you are preparing for the worst problems at competition. For example, the drivetrain motors on our 2016 robot (pictured on the right) were practically pushed up against each other, which made fixing them extremely difficult and cost us matches when we had to fix them at our second competition.&lt;br>&lt;br>

        Also, make sure your final design meets the rules. Your robot needs to be within the height limit, the size limit, everything needs to be within your frame perimeter, and your mechanisms need to fit within the allotted “over the bumper” length AT ALL TIMES (not just in “deploy” and “undeployed,” like with pneumatically actuated mechanisms. Going from point A to B, your mechanism must always remain within the limit), etc. These are not problems you want to run into at competition. They can get you disqualified.&lt;br>&lt;br>

        A special note should be made for keeping your robot within the weight limit. 120lbs for a robot may seem large, but you can very easily rack up weight with thick metal. Make sure you know what on the robot can be thinner (1/16” or VexPro’s .004”) and what metal should be thicker (⅛” or VexPro’s .1”). Generally, drivetrain rails should be thicker because they are supporting all the weight of your mechanism and will experience the most force from other robots or things the robot may run into. Most times, your other mechanisms can be constructed with 1/16” metal.&lt;br>&lt;br>
        Most CAD softwares are equipped with mass assignment calculations, so using those to your advantage will aid you in determining your weight and adjusting the design accordingly&lt;br>&lt;br>
        Miscalculations regarding weight can very easily result in your robot being too heavy, which is a pain to deal with at competition. In 2016 we estimated our weight incorrectly, which lead to our robot being almost 120lbs (that year’s weight limit), but without much of our electrical and pneumatic components installed. As a result, we had to redesign our front manipulator to be much more primitive in function, and to remake our shooter mechanism out of lighter, plastic tubing from VexPro.&lt;br>&lt;br>
        Not only do you need to focus on just fitting in the weight limit, you also need to be mindful of the center of mass. Robots can and will tip if the robot’s center of mass is in an undesirable spot. Ideally, you want your center of mass to be low, about in line with your bumpers will be (or where your drivetrain is in a game without bumpers). These points are where the robot will experience the most contact force. Having the center of mass in line with where the point of contact is will minimize tipping due to pushing. Robots with a high center of mass have a very high chance of tipping. Accelerating, stopping, or turning too fast could result in a tipped robot!&lt;br>&lt;br>

        Also make sure your design incorporates your bumpers. Most FIRST games since the mid-2000s have required them. You will need to design and construct them. For many drivetrain designs, like the very popular West Coast Drive, you may need to build a dedicated structure for your bumpers because your wheels are completely outside of your drive rails.&lt;br>&lt;br>
        In any case, you must pay particular attention to bumper rules because they are specific.&lt;br>&lt;br>&lt;br>

        Shopping Part 2&lt;br>&lt;br>
        With your robot design finalized, order whatever materials you do not have that are incorporated in your design. Get priority shipping if possible.&lt;br>&lt;br>&lt;br>

        Start Fabrication&lt;br>&lt;br>
        Your team may have already began robot fabrication if you pursued your drivetrain early, but if not, You will want to try to begin by the end of week two. If you are deep into fabrication by week 2, you are ahead of schedule, or you have a very large build team that can get things done quickly.&lt;br>&lt;br>
        Our team has a large amount of build members still crunching CAD files during week 2. This allows us to not end up hastily making parts that may later end up unusable. Once a certain amount of CAD files are made and your team feels comfortable with starting to fabricate, you can begin to do so. But as stated, the drivetrain should be the highest priority. The earlier you have a driving robot, the better.
        </item>
        <item/>
    </string-array>
    <string-array name="mech_week3">
        <item>fragment_pager_item_no_image</item>
        <item>Mechanical Week 3</item>
        <item>With your design wrapped up and fabrication started, week 3 should focus on continuing robot fabrication and continuing or starting assembly (depending on the state of your robot’s drivetrain). However your team is fabricating parts, whether it’s with a band saw and a drill press, an in-house CNC mill, or a sponsor’s shop, you should get mostly everything you want fabricated finished this week.&lt;br>&lt;br>
Remember to keep your priorities straight: your drivetrain should be your highest priority during fabrication and assembly, next your main mechanism/intake, then any of your auxiliary mechanisms. Things should generally be fabricated and assembled in that order.&lt;br>&lt;br>&lt;br>

Fabrication&lt;br>&lt;br>
	Remember to employ the best fabrication practices. Be aware of your tools’ limitations and think through how you are to fabricate something. If you have a 4’x4’ sheet metal square, chances are it won’t fit in the bandsaw in certain orientations. Think through how you will be feeding it in (if you have that big of a sheet metal square then you should be using a friend to help support it at least), then make the marks accordingly. Hastily making marks leads to less productivity.&lt;br>&lt;br>
	Other good techniques like match cutting and drilling should also be employed. Match cutting and drilling should be utilized when making multiple of one part, like a gusset. With the gusset, you measure and cut it out and drill the necessary holes. Measure everything else afterward and make sure everything is perfect. If it is within your determined margin of error (which varies depending on what part and where it is going), you can bind it to, in the case of a sheet metal gusset, another piece of sheet metal and use the completed piece as a guide. The same goes for match drilling. The completed holes act as a guide for all the subsequent pieces. This speeds up productivity immensely.&lt;br>&lt;br>
	Remember: measure twice, cut once!&lt;br>&lt;br>&lt;br>

STAYING ORGANIZED&lt;br>&lt;br>
	One problem in fabricating/assembly lies in staying organized. Before build season, your team should have organized your shop as much as they could, with different metals placed in their necessary spots. Also, from a CAD drawing (or hand-drawn) to assembly, you should be able to tell the location of every piece you want . This includes making a list of every part, and assigning it a status, from drawing, fabrication, awaiting assembly, and assembled. Our team uses Trello to document the progress of pieces that will be put on the robot.&lt;br>&lt;br>
	You should also have a designated spot to put pieces that are in a certain stage of completion. Being able to know how far the part is is great, but know where the physical part is located is just as important. We have many tupperware containers that are clearly and understandably labeled, such as “drivetrain fabricated parts,” where parts are to be placed so they do not get lost. Many parts, such as gussets, need to be made several times. To keep them all together inside the container, you can simply tape them together. Yes, our team goes through a lot of tape in one build season. If a part is too large to fit in a container, always have that part next to the container when storing it.&lt;br>&lt;br>&lt;br>

Cutting Your Losses&lt;br>&lt;br>
	When designing what you wanted your robot to do, you should have come up with high priority tasks and low priority tasks, such as, in the case of 2016, having “shooting in the high goal” as a high priority task and “hanging” as a low priority task. If you seem to be running behind on fabrication, it’s time to start deciding what is more important and focusing on them. As an example, we were running behind on build and fabrication in the 2016 season. Because of this, we decided to temporarily drop our hanging mechanism and focused on it after bag and tag day. We implemented our hanging mechanism at our second competition.&lt;br>&lt;br>&lt;br>

Assembly:&lt;br>&lt;br>
	Assembly is pretty straight forward: put the fabricated parts together. However, like fabrication, there are a few things to keep in mind: make it easy on yourself and think it through. There is usually a quickest way to assemble something correctly. Think through it, decide, then assemble.&lt;br>&lt;br>
	There’s always the possibility you will run into problems during assembly. Say a shaft doesn’t quite fit through a hole, like a bearing. You may need to lathe or sand the shaft down. Be ready to employ good fabrication techniques during assembly to make everything fit together. Rarely, especially if all parts were made by hand/band saw/drill press, is every part going to work perfectly the first time without a little fixing.&lt;br>&lt;br>&lt;br>

Drivetrain:&lt;br>&lt;br>
Again, the drivetrain should be your first priority to have working as soon as you can. That includes getting everything fabricated and assembled for your drivetrain as quickly as you can, handing it off to electrical to wire it, then giving it to the programmers to test their code, and debug if they need to. If your drivetrain is not done by the middle of week three, you are going to need to pick up the pace. If you were working on anything else, drop it for now and get the drivetrain done.</item>
        <item/>
    </string-array>
    <string-array name="mech_week4_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Mechanical Week 4 and Beyond!</item>
        <item>Week 4 should be the last week that the mechanical department has strict control over the robot. During or after week 4, the robot should be handed off to electrical for them to finish what they need to do (wiring, install solenoids, etc.), then handed to programming for them to test their code and troubleshoot and resolve any issues.&lt;br>&lt;br>&lt;br>

Robot, Assemble!&lt;br>&lt;br>
	At this point, your team should have all the important parts for mechanisms fabricated. If there are mechanisms you dropped during the last two weeks to save time, those can be revisited after the drivetrain and main mechanisms are finished and assembled and are handed off to the other departments. For now you must focus on just the drivetrain and main mechanisms. The robot with its drivetrain and main mechanism should be completely assembled by mid to late week 4. Auxiliary mechanisms, ideally, should be done and installed by the end of week four or early week 5 to allow ample time for the other departments to do their work and for the drive team to familiarize themselves with the mechanism and practice. However, if auxiliary mechanisms are done later than that, install them anyway. The other departments may be disgruntled with their tardiness, but their completion is better than nothing.&lt;br>&lt;br>
	The picture on the right our 2016 robot with the drivetrain and its main mechanism: the ball transport and the shooter. The auxiliary mechanisms, our Cheval de Frise/Portcullis manipulator and our hanging mechanisms, had yet to be installed. Getting these main parts done allowed our electrical team, programming team, and the drive team to test the robot while we worked on the other parts of the robot.&lt;br>&lt;br>

Generally, the last thing to be added are the sponsor logos. At this point, if you haven’t already talked to your business team, it is time to do so so you can allocate space to put sponsor logos. Thank you sponsors!&lt;br>&lt;br>&lt;br>

Bumpers (if necessary)&lt;br>&lt;br>
Teams handle making their bumpers differently. On 2169, we generally leave bumper building to whoever is crafty and likes working with fabrics. Bumpers do not have to be finished by Bag Day, but it is much easier to make them the right size if you have the robot to measure and test with as you are creating them. There are many online guides for bumpers, and we are always available to help you through the process.&lt;br>&lt;br>

Fabric: Your team will need to decide what kind of fabric to use. KING TeC generally uses a heavy duty fabric. This is especially necessary if your team plans on a defensive strategy, or with a game that involves a lot of robot on robot or robot on field element contact. We suggest asking a fabric wholesaler or local tarp maker for fabric.&lt;br>&lt;br>
Pool Noodles: Pool noodles can usually be found year-round at swim schools, but major retailers such as Target and Walmart will not sell them in the winter. The more dense the noodle is, the more shock is absorbed and the safer your robot will be. Different batches from the same manufacturer can have radically different densities. Don’t be afraid to test the squishiness of multiple pool noodles until finding adequate density. We usually buy up multiple noodles when we find a batch that works well so we don’t have to go noodle hunting every year.&lt;br>&lt;br>

Team Number: Your team number will need to be displayed on the fabric. Teams generally either use stick-on/taped numbers or painted numbers. We recommend paint in order to ensure numbers do not fall off. A coat or two of fabric paint combined with a layer or two of acrylic paint seems to work best on bumpers (skipping the acrylic could result in your numbers becoming discolored as fabric paint usually picks up more dirt.)&lt;br>&lt;br>

Generally, there are two types of bumpers:&lt;br>&lt;br>

Single Colored: Bumpers that only have one color on them. As such, you must make two of these, one for each color (unless FIRST does not require alliance colored bumpers). If you do it this way, you can more easily make a single bumper part that wraps around the entire robot. Wrap-around bumpers may be better or worse for that year’s game, so if you are making the bumpers, ensure that you check with your mechanical team before deciding which kind of bumper to create.&lt;br>&lt;br>
Double Colored: Single units that can alternate between two colors. This allows you to switch between colors while the bumpers are still attached to the robot. This reduces the amount of materials needed for bumpers (wood, pool noodles), but it is more complicated to build. The picture below is our 2016 bumpers, an example of a double colored bumper. If you wish to follow this route, we highly recommend using a guide as they are a bit tricky to visualize when cutting and sewing fabric. As always, we would be happy to assist you in this process. KING TeC usually creates this kind of bumper to make life easier for the drive team. Changing bumper color can be done quickly and easily and your bumpers will not be lost since they are attached to your robot.&lt;br>&lt;br>

The Hand Off&lt;br>&lt;br>
	Once a working robot--drivetrain with at least the main mechanism done--is done, you can hand it off to whichever department needs it: electrical, programming, or the drive team. Let them deal with their stuff while you can shift your focus to the following things:&lt;br>&lt;br>
Fixing the Robot if another Department Breaks Something:&lt;br>&lt;br>
	If one of the other departments, usually the drive team, breaks something on the robot, the mechanical department will need to fix it. First: determine the cause of the problem.&lt;br>&lt;br>
Was the drive team being reckless? If so, give them a good talking to and fix it.&lt;br>&lt;br>
Did it break because the part was not secured or supported well? If so, you will need to redesign that area to make sure it doesn’t happen again at competition. This may include making it with a stronger bar of metal (1/16” to ⅛”).&lt;br>&lt;br>
Finish/Begin to Assemble Auxiliary Mechanisms (if you haven’t finished):&lt;br>&lt;br>
	If your team had to table some of your auxiliary mechanisms, you can go back and finish these mechanisms. Once they are done, acquire the robot and put them on. These auxiliary mechanisms need to be practiced and some of them (hanging mechanism) require skilled drivers and/or operators to implement correctly.&lt;br>&lt;br>
	If you did not design any auxiliary mechanisms or finished all of them, design one if there are parts of the game that you currently can not do. Consult with the strategy department to decide on which parts of the game would be best to pursue. Designing new mechanisms for an existent robot is hard. It can be difficult to work around your already designed and assembled robot. You may need to change a few things. Things like air tanks can moved easily. On the other hand, moving your main mechanism is not recommended. If you are designing a new mechanism, make sure you know what you may have to move and where you will be able to move them.&lt;br>&lt;br>
	Remember, when designing a mechanism, always work with the other departments because they will need participate in programming or wiring the mechanism. They should be on board with whatever designs you choose to pursue.&lt;br>&lt;br>&lt;br>

Drive Station&lt;br>&lt;br>
	While you can get by with testing and practicing without a driver station, you are going to want to have a driver station for competition. A driver station is where your controllers are mounted and where the driver laptop is placed. Oftentimes two rectangles (large enough to mount controllers and the computer to sit), sheet metal, or plywood separated by standoffs will work for a driver station. The computer should snugly fit somewhere, so you may want to make brackets to keep the laptop on the station.&lt;br>&lt;br>
	You want the station to be durable to keep it from breaking or getting damaged. Fortunately, you are not required to build a new driver station every year. You can use the same station year after year, changing out the controllers (joystick to gaming control, wheel, etc.) if need be.&lt;br>&lt;br>
	Work with the drive team and programming department for drive station design. Remember, the design should be optimized for maximum comfortability for the drivers. Their input is important.&lt;br>&lt;br>&lt;br>

Making Replacement Parts:&lt;br>&lt;br>
	Parts break at competition. It happens. You need to prepare for this event. You can do this by making replacements. You should make replacements for mechanisms that extend past your frame perimeter, like intakes or manipulators. While spendy, you may want to get replacement motors and gearboxes for mechanisms and your drivetrain.&lt;br>&lt;br>
	The picture on the right is one of a gear that was in our elevator lift gearbox in 2015. We had assembled replacement gearboxes and had spare parts at every competition we went to in case a gear broke.&lt;br>&lt;br>&lt;br>

After Bag and Tag&lt;br>&lt;br>
	For the most part, the days after bag and tag should be days of rest. You deserve it. Take a few days off to catch up on school or sleep.&lt;br>&lt;br>
	Once you are satisfied with the time off, the mechanical department--and other technical departments for that matter--can come together and address what they should do. If the mechanical department decides they have work to do, go and do it. Some things you may decide to do :&lt;br>&lt;br>
Build a practice robot if you haven’t already done so: Reference the section on practice robots in week 1.&lt;br>&lt;br>
Anything from the previous section that you can still do (new mechanisms and spare parts.&lt;br>&lt;br>
Reorganize your workshop.&lt;br>&lt;br>
Prepare to leave for competition.&lt;br>&lt;br>
Prepare a checklist that lists everything you will need to bring.&lt;br>&lt;br>
Think of the tools you can bring and what ones you may need.&lt;br>&lt;br>
Make your engineering notebook really nice. Catch up on days you missed.&lt;br>&lt;br>
Make a plan for how to fix different parts of the robot in the event they break at competition.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_other_mentors.xml -->
    <eat-comment/>
    <string-array name="mentors">
        <item>fragment_pager_item_no_image</item>
        <item>Mentors</item>
        <item>Mentors are a key ingredient in the FIRST program. Mentors generally preside over a department they are well versed in. People with a history of Mechanical Engineering usually flock to the Mechanical department while Software Engineers and Computer Scientists move towards Programming Departments, and Accountants or Financial Advisors to Business.</item>
        <item/>
    </string-array>
    <string-array name="mentors_find">
        <item>fragment_pager_item_no_image</item>
        <item>Mentor Meetings</item>
        <item>A problem some teams have is finding mentors. &lt;br>&lt;br>
Large teams in your area may be willing to donate or share mentors.&lt;br>&lt;br>
Parents are often a big contributor to mentor force. Many 2169 mentors in our history have been parents. The only problem with parent mentors is that they often leave when their child(ren) graduate, but whatever help they give for however long should be respected and appreciated.&lt;br>&lt;br>
Industry professionals you may meet at any outreach or fundraising events may be willing to help. Remember to get their contact information, and be kind when contacting them. Do not push them into becoming a mentor.&lt;br>&lt;br>
School teachers can also be good mentors. Oftentimes, FRC teams are affiliated with high schools. Use this to your advantage. Contact teachers that may have an interest: IT teachers, science teachers, even business teachers.&lt;br>&lt;br>
Employees of sponsor companies may become interested if you foster a good relationship with a sponsor (which you should strive to do anyway).
        </item>

        <item/>
    </string-array>
    <string-array name="mentors_meetings">
        <item>fragment_pager_item_no_image</item>
        <item>Mentor Meetings</item>
        <item>Many areas with a strong FIRST support have meetings where team coaches and
            mentors can meet and discuss. You can bring up concerns, like help needed. Veteran
            teams are often more than willing to help. Use those teams to help inspire your
            team to become a stronger, more developed team. (KING TeC is always available to help)
        </item>

        <item/>
    </string-array>
    <string-array name="mentors_purpose">
        <item>fragment_pager_item_no_image</item>
        <item>What do Mentors do?</item>
        <item>Mentors guide the team. They provide the knowledge they have learned in their fields to help the kids on the team. You can give advice to them, or even propose ideas. However, let a lot of the action fall on the kids. It is their program and their robot. Find a good balance between guidance and strict, overbearing rule. You do not want to be the one building the robot as it takes away potential learning for the students. You are to provide them a way to succeed, not to drag them there.&lt;br>&lt;br>&lt;br>

Examples for good mentorship:&lt;br>&lt;br>
You know of a possible fundraising opportunity for the team. You can propose the idea, and let the students decide whether it would work for them. If they agree that this opportunity would be beneficial and fun, then they can go through with it. If they deny it, you can try to convince them, if they remain unconvinced, let them drop it. If dropping it ends up being the wrong decision, let it be a learning opportunity. If possible, let the kids be the one that reach out to this program and set up the details with your guidance&lt;br>&lt;br>
The mechanical team wants to go through the optimal gear box, gear ratios, and number of CIMs for their drivetrain in a particular game. Help them through the process of calculating ratios, speeds, wattage draw from the motors, etc. Let them do the calculations once you have taught them, and let them decide what the best gearbox setup is. Ask them why. If you disagree, propose your idea, and explain your reasoning. In the end, let the student decide which option is best.&lt;br>&lt;br>
Guiding the programmers on how to write a PID loop, but letting the kids write the code for the robot. If their code does not work, guide them through the debugging process. In the process, they should be able to find the problems. Direct them to how they could fix it, and explain how you came to that conclusion.&lt;br>&lt;br>

In dealing with students, you have to be able to talk to them. If they propose something that you personally disagree with, like a mechanism or a purchase request, explain to them your concerns. Help them see your point of view. Refusing to explain or not letting students speak will only frustrate the team.&lt;br>&lt;br>

You are also to make sure the environment on the team is a positive one. If there are conduct issues, address them directly and swiftly. Serious issues should be strictly dealt with.
</item>
        <item/>
    </string-array>
    <string-array name="mentors_who_can_be">
        <item>fragment_pager_item_no_image</item>
        <item>Who Can Be a Mentor?</item>
        <item>Pretty much anyone! The earliest mentors on 2169 was made up of the father of the
            kids who started the team and a High School Chemistry teacher. The team later struck
            the interest of professional engineers who joined our team. Some parents of students
            on the team are willing to help, which is always appreciated. The kids will appreciate
            any kind of mentor, from someone just there to supervise them while they work on the
            machinery to professionals who keep an eye on and guide the students on the department
            they have attached themselves to.
        </item>

        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_pr.xml -->
    <eat-comment/>
    <string-array name="pr">
        <item>fragment_pager_item_no_image</item>
        <item>Public Relations</item>
        <item>Public Relations (PR) should be used to keep sponsors updated, energize a support base, and create and maintain a recognizable presence in FIRST by communicating with other teams. For an FRC team, the main goal of PR is to promote team events and community outreach. Teams should also give updates on the progress of the robot and competition updates as well. Teams with successful PR departments update social media regularly and use a variety of platforms to promote their team and the principles of FIRST.&lt;br>&lt;br>

The trick to an engaged audience is strategically using different social media platforms to target a variety of demographics. For example, Twitter is very popular amongst teachers and higher level school district administrators, as well as FRC teams and sponsors. Therefore, Twitter should be used to share community outreach projects and progress on the robot Utilize twitter for short and frequent posts. Instagram and Snapchat are more popular amongst the members of different teams, so they are best used to share photos from meetings and action shots of robot construction. Many high school students use snapchat, so this can be a lucrative way to share less formal information about your team. Facebook is most commonly used amongst sponsors and parents of the team, so it\'s best used to share community outreach, occasional progress updates on the robot, and how the robot does at competitions. Long posts are best saved for Facebook. Do not attempt to post large albums of photos or text longer than a sentence or two on any social media platform other than Facebook.&lt;br>&lt;br>

Another part of using social media effectively is varying how often posts are made on each platform. Posting frequency should match how often the target demographic uses the platform. For Twitter and Instagram, a post should be made about once a day. But with Snapchat, posts should be made about once a week. Facebook posts can be made sporadically.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_programming.xml -->
    <eat-comment/>
    <string-array name="prog_appdev">
        <item>fragment_pager_item_no_image</item>
        <item>Application Development</item>
        <item>Application development is a great supplementary resource to teams that have the manpower to support a few people being dedicated to it. It is requires work in both the offseason and the build season.&lt;br>&lt;br>

In the build season anyone involved with this should be focused on coordinating with the strategy department to create a scouting app that is able to accurately record data for the team to use during strategy meetings in competitions. This can be made for pit scouting, as well as stands scouting.&lt;br>&lt;br>

In the offseason programmers should talk to the non-stem departments to determine if there are options to help promote the team or help others through the use of applications. This app is an example of that. This is also a good time to code any other FIRST related apps that you may have had an idea for.
</item>
        <item/>
    </string-array>
    <string-array name="prog_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to Programming</item>
        <item>

So, you’re responsible for making that big metal box with wheels move around the field.  Where do you start?  First, you’re going to want to install the necessary software.&lt;br>&lt;br>&lt;br>

Programming: Eclipse and its Plugins&lt;br>&lt;br>
The programming department for our team uses the JAVA programming language to program their robot. JAVA can be written in  Eclipse. Eclipse is a java based open source software program that allows you to read and write in java or C++. The FRC Roborio uses plugins that make programming languages like JAVA and C++ compatible with the Roborio.&lt;br>&lt;br>

After installing Eclipse, you need to install the FRC plugins that make JAVA and C++ compatible with the roborio. In the image to the right, it shows the standard setup with a standard java project when Eclipse and FRC plugins are installed. It shows a robot, OI, commands and subsystems package for storing all of your folders. Down below are definitions on what each package should store.&lt;br>&lt;br>

OI - input output and constants&lt;br>&lt;br>
Robot - centerpiece for all robot commands and subsystems&lt;br>&lt;br>
Commands - what you want the robot to do with motors, compressors etc.&lt;br>&lt;br>
Subsystems - creating the motors, compressors etc. that is on your robot and any functions you want them to perform&lt;br>&lt;br>&lt;br>

Writing the Code&lt;br>&lt;br>

Setting Up&lt;br>&lt;br>

 Now that everything is installed, you need to write the code.  When it comes to programming, it’s a bit like language or extremely complex math, nobody does it exactly the same.  If everything is installed correctly, there should be a button on the taskbar (File, Edit, Source, ect.), there should be a button that reads “WPILib”.  If this is there, everything is good to go.&lt;br>&lt;br>

Creating the Project - A project is what holds all the code and metinfo for the robot’s instructions.  Click File > New > Project.  A dialog box will pop up.  In the search box, enter “Robot” and select “Robot Java Project, as the picture below shows.&lt;br>&lt;br>

Setting up Sub-Systems- As you learned earlier, Sub-Systems are the elements of programming that connect the electrical system and the code.  For this element, you need to use the RoboRio connection port numbers to program the RoboRio to communicate between motors, solenoids, servos, encoders, ect.  There will be one subsystem for every mechanism.  For example, if you had a flywheel system, and intake, and a drive train, you would have 3 sub-system classes.  Below is an example of a sub-system class for a drive train with two talons.</item>
        <item/>
    </string-array>
    <string-array name="prog_week1">
        <item>fragment_pager_item_no_image</item>
        <item>Programming Week 1</item>
        <item>Week 1 for Programming involves working with the other technical departments (CAD, mechanical, and electrical) and Strategy to help design what the robot will do. You should also familiarize yourself with the things you will be programming, such as the Rio or any third party device you will be using.&lt;br>&lt;br>&lt;br>

Design Process&lt;br>&lt;br>
Along with the strategy, electrical, mechanical, and CAD (if you have one) departments, the programming department should contribute in deciding what you want to the robot your team will make to do.&lt;br>&lt;br>
Do you want the robot to focus on pure offense?&lt;br>&lt;br>
Is there an endgame task you want your robot to accomplish?&lt;br>&lt;br>
How important is this endgame task? How many points does it award you?&lt;br>&lt;br>
Do you want to focus on defense? Is there even defense?&lt;br>&lt;br>
Do you want to try to do everything?&lt;br>&lt;br>
We recommend having a skilled programming base with professional mentors when trying to accomplish this. “A jack of all trades; master of none” applies very well to FRC. If unprepared, trying to go for every task in the game can end with underwhelming results. The teams that can do everything consistently every year have a large, devoted, and highly skilled programming department.&lt;br>&lt;br>
What kind of drivetrain will work well in this game and help our strategy.&lt;br>&lt;br>
Most importantly, can the team do the tasks?  Do  have the resources?  Is the group capable of doing this in 6 weeks?  For example, if the programmers have never touched image processing, a team may want to make a vision beta in the off season before attempting to use it during the season.&lt;br>&lt;br>
	Each department has a special skill that is vital to the design process. The programming department’s role in the designing process is to have an idea of what the department can accomplish. If someone proposes a design that would require an amount of programming skill that is not present or not reachable on your team during one build season, the department should work to try to change the design for it to be a more accomplishable goal for the programmers. This is true for other departments as they should also be acting as a check on the designs, adding their input regarding the abilities of the department, determining whether a design or goal is feasible.&lt;br>&lt;br>&lt;br>


Start Basic Programming&lt;br>&lt;br>
If you are using a new Rio, you will need to start by installing the necessary software on the Rio. https://wpilib.screenstepslive.com/s/4485/m/13809 has the necessary information regarding installing the necessary software, regardless of the language you are using (this Survival Guide will mainly go through using Java). Next, you will want to familiarize yourself with JAVA the language as an object oriented language and get use to basic projects, classes, objects, variables, etc. Then, you want to implement your knowledge of JAVA with the FIRST provided Plugins they use so your code can compile onto the Rio. Finally, you have an open source platform to program your robot and test your code on a real FIRST robot. Now the programming begins...&lt;br>&lt;br>&lt;br>

Help with Prototypes?&lt;br>&lt;br>
The picture to the right is a programmed prototype for our 2010 drivetrain. It used the VEX control system. As such, if you have access to these tools, prototyping may involve knowing different languages. If the team wants to test a flywheel at various speeds, you will most likely have to make a program to change the speed. This is the basic idea of programming. Your department is given a set number of sensors, motors, and other components and has to recreate and add function to those components. Like for this drive train, you need to create four motors and add functionality so a driver can easily manipulate this robot to do as they want with it like drive it.&lt;br>&lt;br>

In most cases, the programming department will not be needed during the prototyping phase. However, if needed, you may be contracted to program a few things.
</item>
        <item/>
    </string-array>
    <string-array name="prog_week2_4">
        <item>fragment_pager_item_no_image</item>
        <item>Programming Weeks 2-4</item>
        <item>Week 2-4 for Programming involves working on implementation of the robot code and how you want to organize all of your files, programming the actual robot functions and testing your code during the final mechanical weeks working on the robot.&lt;br>&lt;br>&lt;br>

Design Process&lt;br>&lt;br>
The programming department’s role in the designing process is to have an idea of what the department can accomplish. If someone proposes a design that would require an amount of programming skill that is not present or not reachable on your team during one build season, the department should work to try to change the design for it to be a more accomplishable goal for the programmers. This is true for other departments as they should also be acting as a check on the designs, adding their input regarding the abilities of the department, determining whether a design or goal is feasible.&lt;br>&lt;br>
Keep this idea relevant when you are programming your robot. If a function or requested action done by the robot can not be solved by the programming department and needs the assistance of other departments in order to solve this problem. These two weeks are for that. Also, the two weeks are for the physical programming of the robot and making sure your code can compile. It is important to have all the functions of the robot created AND do not crash the robot.&lt;br>&lt;br>&lt;br>


Sensors&lt;br>&lt;br>
The programming department is to the point where they have a general idea of how the robot will run whether that be a basic tank drive, intake mechanism, or some other simple part of the robot. If the programming department is requested to go into more complicated tasks such as using encoders to acquire motor speed or a gyro to detect the robot\'s angle, this is when the department does research and communicates with the electrical department on what they can do. It is important that if you program a type of motor (ex. A talon or a jaguar) it is up to the department to confirm with electrical or mechanical to make sure which they are using. The same concept goes for sensors as well. These two images are two different ways a team can use encoders. One is a physical encoder wired to the rio and the other is a wire that plugs into the motor encoder. This is one example of when the programming department needs to communicate with electrical and mechanical on the components that they use.&lt;br>&lt;br>&lt;br>


Help Testing Code?&lt;br>&lt;br>
This is the point in the season when the programming department can say they have the final product for their code. The one last thing they need to do is make sure their code can work on the robot. There can be multiple scenarios where the robot does not function to its abilities. It could be a mechanical fault, it could be an electrical fault, or it could be a programming fault. As the final department that can get their hands on the robot, it is the departments job to make sure all of the components of the robot do their job. This part comes later in the season but the mechanical department could have a robot for the programming department in the first half of build season.&lt;br>&lt;br>

	At this phase in the programming department, the department needs to be ready and on standby to test and run its code on the robot in order to start seeing a competition ready robot.
</item>
        <item/>
    </string-array>
    <string-array name="prog_week5_6">
        <item>fragment_pager_item_no_image</item>
        <item>Programming Weeks 5-6</item>
        <item>Week 1 for Programming involves working with the other technical departments (CAD, mechanical, and electrical) and Strategy to help design what the robot will do. &lt;br>&lt;br>&lt;br>

Design Process&lt;br>&lt;br>
The programming department’s role in the designing process is to have an idea of what the department can accomplish. If someone proposes a design that would require an amount of programming skill that is not present or not reachable on your team during one build season, the department should work to try to change the design for it to be a more accomplishable goal for the programmers. This is true for other departments as they should also be acting as a check on the designs, adding their input regarding the abilities of the department, determining whether a design or goal is feasible. &lt;br>&lt;br>
At this phase in the build season, this information will be very irrelevant unless some major event happened where all the departments need to change a huge function on the robot. Now, after the crunch the mechanical and electrical departments made to get your robot built, it is time for your moment to shine.&lt;br>&lt;br>&lt;br>


Late Programming and Testing&lt;br>&lt;br>
By now, the programming department will have programmed all the necessary functions for the robot and are ready to test it on the robot. It is import to be calm, focused, and remember to be safe when enabling a live robot with your code on it. Hey, it can happen when you program a function on the robot where it accidentally starts driving forward full speed towards another member, so be very safe and careful about how you program your robot. Make sure to be safe and ready  for anything to happen.&lt;br>&lt;br>
This is the testing phase and when all the hard work of robotics members come together and it is a very happy moment for the team when a component on the robot works to thee best of its ability because of you. But it is best you prepare for the case where a problem occurs. If a motor stopped moving on your robot, double check electrical and double check you call the motor in your code when you want it to. It is very important to the programming department to trace back where things went from right to wrong.&lt;br>&lt;br>

Here is a list of things to check for when a programming problem occurs…&lt;br>&lt;br>
Robot is on, connected, robot code is on, and everything is plugged in and has power&lt;br>&lt;br>
The sensor or motor that is called is used and can be identified in the Web Interface that can communicate with the rio&lt;br>&lt;br>
The code does not throw errors or reroute the function so it may never or always be called&lt;br>&lt;br>
Check Chief Delphi or FIRST Forums for anyone else having the same issue&lt;br>&lt;br>&lt;br>

Resources&lt;br>&lt;br>
	Here are some good links to resources that have helped us over the years&lt;br>&lt;br>
https://www.chiefdelphi.com/forums/forumdisplay.php?f=51&lt;br>&lt;br>
https://wpilib.screenstepslive.com/s/4485/m/13809&lt;br>&lt;br>
http://first.wpi.edu/FRC/roborio/release/docs/java/&lt;br>&lt;br>&lt;br>

Tips&lt;br>&lt;br>
	Some tips from the programing department here on 2169 KING TeC are…&lt;br>&lt;br>
Use a public repository to store your code and go back when you have problems&lt;br>&lt;br>
Update your software and any updates to the RoboRio/cRio before you arrive at competition&lt;br>&lt;br>
Always trace back through electrical because sometimes it might just accidentally be unplugged
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_competitions_regionals.xml -->
    <eat-comment/>
    <string-array name="qualifications">
        <item>fragment_pager_item_no_image</item>
        <item>Qualifying Matches</item>
        <item>

	The second portion of the competition starts the competitive matches. The energy-filled day begins with a
            rush to the stands. If you want to make sure you get a good section for your team to cheer, be sure
            to send a team of around six members to run into the stands and reserve a couple rows. Often times, teams
            will get stuck with either not enough room to fit their whole team, or horrible angle that doesn’t allow them
            to see the robots perform. Once the seating rush is over, many teams use the practice field and it is difficult
            to get a spot. This is why the time allotted for drive practice during Thursday is so important. If your robot is
            working and you have had ample driving practice, don’t be afraid to relax. Organize your scouters, finish any pit
            scouting, and practice some cheers (some some sort of “Good Morning” cheer is always fun, (see Team Spirit section).
            This is the “calm before the storm,” so enjoy it. \n\n&lt;br> &lt;br>

	Another event that is important to remember on Friday is the Driver’s Meeting. This is for drive teams only,
            and is essentially a Q and A with the judges and referees. This meeting is essential to teams who have
            questions about any aspect of their strategy and its legality. It’s better to ask an obvious question
            in this meeting than to get penalized for it later! Go into the meeting with a list of any questions
            you may have, and be prepared to prioritize, as the meeting is only around 15-20 minutes. At the end of
            the driver meeting, each team receives a copy of the match schedule, which should be analyzed before Opening
            Ceremonies. Take it back to your Pits and create a list of your matches, their times, your alliance partners,
            who you’re against, and your alliance color. You can use this information to your advantage, so be sure to communicate
            with your scouters throughout the day to get the most updated information!\n\n&lt;br> &lt;br>

	Have your whole team attend the opening ceremonies, and if you’re in the few matches, you may
            be required to set up your robot or queue. The first match will begin immediately after
            Opening Ceremonies. The basic structure of a match is:\n\n\n&lt;br> &lt;br>
Bring your robot to Queuing, which corresponds to your alliance color and number, two matches
            before your scheduled match. You will wait here for the next match, then move to
            the next level of Queuing. After the second match, start moving towards the field.\n\n&lt;br> &lt;br>
Have two drive team members carry the robot onto the field and line it up for autonomous. \n\n&lt;br> &lt;br>
Have a third member connect your team’s driver station to the field control system using the provided
            Ethernet cable. Make sure you can connect to your robot and test your controllers to make
            sure everything is plugged in! Then select the correct autonomous program if you have one.\n\n&lt;br> &lt;br>
Have the fourth member move the robot cart to the designated area.\n\n&lt;br> &lt;br>
Wait for the announcers to finish introducing the teams (when they announce your team, it’s
            always fun to coordinate a move or gesture to give your team recognition, such as a bow or a dance move. Be creative!)\n\n&lt;br> &lt;br>
Once the match begins (Begin in 3… 2… 1… GO!), stand behind the white driver station line
            until the autonomous period ends and the teleoperated period begins. In FRC,
            there is no delay between autonomous and teleop, so be prepared to start driving immediately!\n\n&lt;br> &lt;br>
After the match has completed, wait until the referees deem it acceptable to remove your robots
            from the field. Have one team member retrieve your cart, one disconnect the driver station, and two lift it off the field.\n\n&lt;br> &lt;br>
Take the robot back to your pit, assess any damage or malfunctions, and prepare to repeat the cycle!\n\n\n&lt;br> &lt;br> &lt;br>

	It’s also important to know how the ranking system works at a competition during the qualifying
            rounds. The whole system works off of “Ranking Points,” abbreviated to “RP.” \n\n\n&lt;br> &lt;br>
A win in a match awards each team on the winning alliance Two (2) RP\n\n&lt;br> &lt;br>
A tie awards each team on both alliances One (1) RP\n\n&lt;br> &lt;br>
A loss yields Zero (0) RP\n\n\n&lt;br> &lt;br>
Some years, the game may award extra RP to an alliance for completing certain tasks during the match
            (for example, in 2016 FIRST Stronghold, an alliance was awarded 1 RP for breaching 4 out of
            5 of the other team’s defenses, and 1 RP for making at least 10 shots, in addition to the Win/Loss/Tie RP)\n\n&lt;br> &lt;br>
A team’s RP are cumulative throughout the Qualifying Matches, and they are the first determinant in a team’s ranking.
            However, since they are based off of wins and losses, many teams often end with the same RP.
            Because of this, tiebreakers are organized in tiers. Unfortunately, these often change
            between years due to what the game creators believe is more difficult. For an example,
            the 2016 FIRST Stronghold Tiebreakers were as follows:\n\n\n&lt;br> &lt;br>

Ranking Points (RP)\n\n&lt;br> &lt;br>
Cumulative Autonomous Points\n\n&lt;br> &lt;br>
Cumulative Scaling/Challenge Points\n\n&lt;br> &lt;br>
Cumulative Goal Points\n\n&lt;br> &lt;br>
Cumulative Defense Crossing Points\n\n&lt;br> &lt;br>
Record (W-L-T)\n\n\n&lt;br> &lt;br> &lt;br>

In order to know what the ranking tiebreakers are for the current season, be sure to check the Game Manual
            Section 5 about Tournaments. Generally speaking, a team will play around 10-12 matches in a
            Qualifying Competition. Always send at least one member of your team to every match, even if
            your robot is inoperable. If no one is there, your team receives 0 RP for that match and is
            listed as a “No-Show.” Even if you find yourself ranked near the bottom, there is always a chance
            you will get picked later on, so never lose hope! During the qualifying matches, there are a couple
            things to remember for those who aren’t on the drive team:\n\n\n &lt;br> &lt;br>

Make sure your team maintains a positive presence in the stands. Those who aren’t scouting
            or on Pit Crew should be celebrating whenever your team is on the field, regardless
            of performance. For more information, see the Team Spirit section.\n\n&lt;br> &lt;br>
Always Scout, utilizing both Quantitative and Qualitative methods (see Strategy section for more
            information on those), and most importantly communicate scouting data with the drive team.
            You may have information about their opponents or partners that they could use in the match,
            such as a weak spot of a good robot.\n\n&lt;br> &lt;br>
Never leave your pits empty! Teams of judges are walking throughout the pits even
            during matches to ask your team questions that are critical to your team’s
            award success. You always want someone knowledgeable in non-STEM
            and STEM departments available to interview with judges. \n\n\n&lt;br> &lt;br> &lt;br>

	Once Friday is complete, it will be pretty clear which teams will end up being
            ranked within the top eight, even though the qualification matches usually
            spill into Saturday morning. It is recommended that your Strategy team gathers
            together Friday night and builds a kind of “Pick List” of teams you want to keep
            your eye on for the next day. Whether you are ranked highly and are looking for teams to pick
            , or you are looking for teams to advertise yourself to if you’re ranked lower, having
            a pick list going into the last day of competition is always a good idea. This strategy
            meeting is where the data from Pit, Qualitative, and Quantitative scouting are all utilized.
            See the Strategy section for more info on the usage of scouting data. \n\n\n&lt;br> &lt;br> &lt;br>

	Entering the final day of competition, the qualification matches will continue to run for most of the morning,
            and alliance selections usually begin during lunch. Since the pick list is already made,
            have your scouters mostly focus on those teams. Since you are now able to filter out the teams
            you don’t need to watch, you can have your scouting teams relax a little bit. Again, be sure to communicate
            any important information about those teams to the strategy team! It is now more important than
            ever to tell them if a robot that you previously thought was good breaks or has issues, because
            it can be devastating to find out your alliance partner in eliminations can’t perform.
            As lunch draws nearer, and qualification matches start to wind down, it’s time to settle in,
            because Alliance Selections are about to begin, and Elimination Matches are soon to follow!
          </item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_other_safety.xml -->
    <eat-comment/>
    <string-array name="safety_awards">
        <item>fragment_pager_item_no_image</item>
        <item>Awards</item>
        <item>There are safety related awards (Official FIRST Descriptions):&lt;br>&lt;br>
Industrial Safety Award: Celebrates the team that progresses beyond safety fundamentals by using innovative ways to eliminate or protect against hazards.&lt;br>&lt;br>
Safety Hard Hat Pin: A pin awarded to two teams per competition that exemplified proper safety practices.&lt;br>&lt;br>=
Safety Animation Award: Every year teams can compete for the Safety Animation Award by submitting an animation that exemplifies good safety standards
</item>
        <item/>
    </string-array>
    <string-array name="safety_bring">
        <item>fragment_pager_item_no_image</item>
        <item>Things to Bring to Competition</item>
        <item>Everything in the above list&lt;br>&lt;br>
Judges may want to see them&lt;br>&lt;br>
A copy of the FIRST Safety Manual&lt;br>&lt;br>
Material to maintain a clean and safe pit area&lt;br>&lt;br>
Handheld vacuum, broom, dustpan, etc.&lt;br>&lt;br>
A small step ladder&lt;br>&lt;br>
Stools cannot be substituted for a ladder. You WILL be caught&lt;br>&lt;br>
Safety glasses&lt;br>&lt;br>
Safety glasses are required in the pit area and on the field&lt;br>&lt;br>

You are the designated person on your team to know where emergency exits are. Any time a judge, safety inspector, or anyone else has a safety related question or concern, you are the person to talk to.
</item>
        <item/>
    </string-array>
    <string-array name="safety_safe">
        <item>fragment_pager_item_no_image</item>
        <item>Safety</item>
        <item>Your team should be safe in all of their endeavors. It is the role of the safety coordinator/captain/lead (whatever title your team decides upon) to make sure your team is safe at all times. Here is a list of things that a safety captain should oversee and maintain:&lt;br>&lt;br>
First Aid Kit: Your team should have a first aid kit with everything you may need in case of an accident. You should keep a log of inventory, and document when supplies are used, so you can get more when needed. If any products included in the kit expire, make sure they are still good before going to competition.&lt;br>&lt;br>
Injury Log: Have a log documenting when injuries occur. This can also give you an idea of what people get hurt doing. If these types of injuries repeat, you may want to adjust rules to stop these injuries from happening.&lt;br>&lt;br>
Team Safety Manual: It is the role of the safety captain to create, maintain, or update your team’s safety rules. Your team should have a safety manual. Inspectors and judges will be impressed if you have a thorough set of rules your team has established. &lt;br>&lt;br>
Emergency Contacts: Have a list of numbers people can contact in case of an emergency. These can be general, such as Poison Control’s number. More specifically, a student on the team could have a certain condition that requires a specific contact.</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_spirit.xml -->
    <eat-comment/>
    <string-array name="spirit_comp">
        <item>fragment_pager_item_no_image</item>
        <item>Spirit At Competition</item>
        <item>Spirit at competition is very important. The more visible your team is, the more likely you will be remembered by everyone at the event which can help with sponsorships, awards, recruitment, and alliance selection.  Drive Teams really appreciate their team cheering them on, regardless of match outcome.  Teams should have cheers for a variety of scenarios as well as general cheers that can be done at any time.  Most teams incorporate their team name, number, and theme into their cheers.  The idea behind spirit is to have fun at competition and to cheer on FIRST and your team/alliance.&lt;br>&lt;br>
	The spirit award is given out at competition to support the team exemplifying their team’s image through cheering.  Only one is given out at each competition so make sure to be loud and proud at all times.  In addition, spirit helps your team’s image for other awards such as Chairman’s or Imagery. The use of mascots, flags, and pom poms is highly recommended.&lt;br>&lt;br>
	When making cheers, keep them short and to the point.  This makes them easier to memorize, cheer, and listen to.  Other teams have cheers of their own that can be edited to your own team and image.</item>
        <item/>
    </string-array>
    <string-array name="spirit_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to Spirit</item>
        <item>Spirit is important on every team.  Everyone can participate in spirit regardless of experience or ability.  The goal of spirit is simple; keep the morale on the team up and spirits high.  Throughout the season, tensions will rise and stress will become intense.  Keeping a positive attitude is extremely important.
</item>
        <item/>
    </string-array>
    <string-array name="spirit_season">
        <item>fragment_pager_item_no_image</item>
        <item>Spirit During Build Season</item>
        <item>Members of the team should always try to keep a positive attitude throughout the season.  Things like scheduled breaks, team activities, and games can help lighten the load during high stress environments.</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/content_departments_strategy.xml -->
    <eat-comment/>
    <string-array name="strat_findingstrat">
        <item>fragment_pager_item_no_image</item>
        <item>Finding a Strategy</item>
        <item>Reading the Manual&lt;br>&lt;br>
The game manual is the most valuable resource when trying to find a strategy.  The game manual includes game objectives, scoring values, penalties, aspects of the field, and more.  All members of the team should read the game manual regardless of their skills and interests because there are rules and guidelines for almost all areas.&lt;br>&lt;br>
The manual should be read like a legal document.  The manual includes the terms and conditions all teams need to follow.  Keywords are bolded, capitalized, or otherwise indicated each time they are printed in the manual.  Definitions for these keywords are traditionally at the end of the manual.  By defining these terms, FIRST makes the game manual absolute meaning every word in the game manual is there for a reason.&lt;br>&lt;br>
This reading method helps to illuminate the best strategy. Each team will have their own strategy based on the resources they have access to.  Resources include budget, experience, skill, number of team members, and time.  Each team MUST evaluate their team’s resources and form their strategy accordingly.  A rookie team with a small budget may choose a less ambitious strategy than a veteran team with many sponsors and team members.&lt;br>&lt;br>
When reading, teams should especially examine scoring values and penalties.  The ways to score during a match (directly or indirectly) are: scoring points, playing defense, and drawing penalties.  Therefore, these are some of the most important methods to evaluate when teams develop their strategy.  Note: a strategy based around penalties is not in the best interest of FIRST or of competing teams so a team that finds themselves heavily incorporating penalties into their strategy should probably reevaluate their options.&lt;br>&lt;br>
Teams should also stay updated on the forums, Q and A,  and rule updates FIRST provides.  For more information, read the game manual or check the FIRST website.&lt;br>&lt;br>&lt;br>

Evaluations&lt;br>&lt;br>
	 Once a team has read the game manual more than once, they should start evaluating and finding their own strategy.  There is no set way to accomplish this as every team builds a different robot.  However, there are some key things that all teams should incorporate into their strategy.&lt;br>&lt;br>
	A team should not focus on every game objective.  Successful teams specialize in specific tasks and become experts at those tasks.  A winning robot can usually do two to three things on the field.  The tasks that a robot can’t do should be made up for by alliance partners during elimination matches.&lt;br>&lt;br>
	Evaluating point scoring is an important part of finding a strategy.  Each action on the field scores a different amount of points.  Since it is the goal of each alliance to score the most points, finding the way each robot can individually score the most points effectively is crucial.  Usually more difficult tasks are worth higher point values so teams should decide whether or not they should go for the most difficult tasks (based on the resources that team has).&lt;br>&lt;br>
	Complementing other team’s robots is another thing to consider when deciding strategy.  Teams with the most experience will usually be performing similar tasks on the field.  To complement a team with experience, pursuing tasks on the field that veteran teams usually can’t do could be a winning strategy.  Rookie teams should especially consider this to increase the chance of choosing/being chosen by a team with more experience during alliance selections.&lt;br>&lt;br>
Evaluating the game as a whole can also help teams find their strategy.  Teams should ask themselves questions such as “is defense valuable in this year’s game?” and “will this game be high or low scoring?”.  To answer questions like these, keep in contact with other teams and be sure to keep reading the game manual.  Sometimes, the game animation will also give a score for the match given in the animation.  While the score in the animation may not be accurate, it can help teams visualize scoring options.&lt;br>&lt;br>

Deciding the strategy of the robot should be done with other technical department’s input.  The technical departments--mechanical, CAD, electrical, and programming--will be in charge of shaping the robot  decided upon in strategy meetings.  Because of their role as creators of  the robot, they will have important and significant input regarding their department’s abilities and limits. A certain strategy may not be optimizable to its fullest potential if a department is limited by a factor (a strategy involving scoring goals in 2016 may be limited if the programming department has never programmed vision processing and are new to the subject). As such, you may want to explore different possibilities that can be reasonably obtained in the build season.
</item>
        <item/>
    </string-array>
    <string-array name="strat_intro">
        <item>fragment_pager_item_no_image</item>
        <item>Introduction to Strategy</item>
        <item>
Strategy is the most important aspect of the first week in the build season.  It includes reading the game manual, evaluating the game, and deciding what kind of robot will be built.  It is also extremely beneficial to scout each team at a competition for alliance selections.  Picking the right alliance partner(s) is a very important part to achieving success at a competition (see the game manual for details on alliance selections).&lt;br>&lt;br>

Strategy is important because members of a team need to build the correct robot.  Establishing a strategy at the beginning of build season reduces conflicts later on including design, fabrication, and programming.</item>
        <item/>
    </string-array>
    <string-array name="strat_scouting">
        <item>fragment_pager_item_no_image</item>
        <item>Scouting</item>
        <item>Scouting is vital to strategy.  It allows teams to collect reliable data for alliance selections.  There are many different types of scouting that teams usually perform and can usually be summarized into three categories: quantitative, qualitative, and pit scouting.&lt;br>&lt;br>&lt;br>
Quantitative Scouting&lt;br>&lt;br>
Know which robot is scoring which points during each match.  A robot could be a part of a high scoring match even though their alliance partner did the majority of the scoring.  Quantitative scouting is all about numbers. Have your team mark which robots scored what throughout the competition.  To do this, one person from a team should be designated one robot (the ratio between people and robots should be 1:1 if possible).  They should mark down how many of each objective that robot scored.  For example, if a robot scores two goals and raises three flags that should be indicated in quantitative scouting.  Quantitative scouting is traditionally done on paper however some teams choose to use an app.&lt;br>&lt;br>&lt;br>
Qualitative Scouting&lt;br>&lt;br>
	Numbers can’t record everything.  This is where qualitative data comes in.  Qualitative scouting is meant for the data numbers can’t account for.  This includes driver performance, human player ability, and robot performance notes (such as whether or not a robot tipped over, moved quickly, or drew a penalty).  This data should be collected throughout the competition and should almost always be done on paper.&lt;br>&lt;br>&lt;br>
Pit Scouting&lt;br>&lt;br>
Pit scouting includes walking through the pits and asking teams about their robots before competition starts.  Not only should you use their answers as data, but taking notes on the physical build of their robot is also important.  Teams should take notes on all parts of the robot including the drivetrain and mechanisms.  This is can be used for alliance selections later, such as if a team needs to pick a robot that is effective defensively, they should choose a robot with an appropriate drivetrain.
</item>
        <item/>
    </string-array>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/build/intermediates/exploded-aar/com.android.support/appcompat-v7/20.0.0/res/values/values.xml -->
    <eat-comment/>
    <attr format="reference" name="actionBarDivider"/>
    <attr format="reference" name="actionBarItemBackground"/>
    <attr format="dimension" name="actionBarSize"/>
    <attr format="reference" name="actionBarSplitStyle"/>
    <attr format="reference" name="actionBarStyle"/>
    <attr format="reference" name="actionBarTabBarStyle"/>
    <attr format="reference" name="actionBarTabStyle"/>
    <attr format="reference" name="actionBarTabTextStyle"/>
    <attr format="reference" name="actionBarWidgetTheme"/>
    <attr format="reference" name="actionButtonStyle"/>
    <attr format="reference" name="actionMenuTextAppearance"/>
    <attr format="color|reference" name="actionMenuTextColor"/>
    <attr format="reference" name="actionModeBackground"/>
    <attr format="reference" name="actionModeCloseButtonStyle"/>
    <attr format="reference" name="actionModeCloseDrawable"/>
    <attr format="reference" name="actionModeCopyDrawable"/>
    <attr format="reference" name="actionModeCutDrawable"/>
    <attr format="reference" name="actionModeFindDrawable"/>
    <attr format="reference" name="actionModePasteDrawable"/>
    <attr format="reference" name="actionModePopupWindowStyle"/>
    <attr format="reference" name="actionModeSelectAllDrawable"/>
    <attr format="reference" name="actionModeShareDrawable"/>
    <attr format="reference" name="actionModeSplitBackground"/>
    <attr format="reference" name="actionModeStyle"/>
    <attr format="reference" name="actionModeWebSearchDrawable"/>
    <attr format="reference" name="actionOverflowButtonStyle"/>
    <attr format="reference" name="activityChooserViewStyle"/>
    <attr format="reference" name="buttonBarButtonStyle"/>
    <attr format="reference" name="buttonBarStyle"/>
    <attr format="reference" name="dividerHorizontal"/>
    <attr format="reference" name="dividerVertical"/>
    <attr format="reference" name="dropDownListViewStyle"/>
    <attr format="dimension" name="height"/>
    <attr format="reference" name="homeAsUpIndicator"/>
    <attr format="boolean" name="isLightTheme"/>
    <attr format="reference" name="listPopupWindowStyle"/>
    <attr format="dimension" name="listPreferredItemHeight"/>
    <attr format="dimension" name="listPreferredItemHeightLarge"/>
    <attr format="dimension" name="listPreferredItemHeightSmall"/>
    <attr format="dimension" name="listPreferredItemPaddingLeft"/>
    <attr format="dimension" name="listPreferredItemPaddingRight"/>
    <attr format="reference" name="searchDropdownBackground"/>
    <attr format="dimension" name="searchResultListItemHeight"/>
    <attr format="reference" name="searchViewAutoCompleteTextView"/>
    <attr format="reference" name="searchViewCloseIcon"/>
    <attr format="reference" name="searchViewEditQuery"/>
    <attr format="reference" name="searchViewEditQueryBackground"/>
    <attr format="reference" name="searchViewGoIcon"/>
    <attr format="reference" name="searchViewSearchIcon"/>
    <attr format="reference" name="searchViewTextField"/>
    <attr format="reference" name="searchViewTextFieldRight"/>
    <attr format="reference" name="searchViewVoiceIcon"/>
    <attr format="reference" name="selectableItemBackground"/>
    <attr format="reference" name="spinnerDropDownItemStyle"/>
    <attr format="reference" name="spinnerStyle"/>
    <attr format="reference" name="textAppearanceLargePopupMenu"/>
    <attr format="reference" name="textAppearanceListItem"/>
    <attr format="reference" name="textAppearanceListItemSmall"/>
    <attr format="reference" name="textAppearanceSearchResultSubtitle"/>
    <attr format="reference" name="textAppearanceSearchResultTitle"/>
    <attr format="reference" name="textAppearanceSmallPopupMenu"/>
    <attr format="reference|color" name="textColorSearchUrl"/>
    <attr format="string" name="title"/>
    <bool name="abc_action_bar_embed_tabs_pre_jb">false</bool>
    <bool name="abc_action_bar_expanded_action_views_exclusive">true</bool>
    <bool name="abc_config_actionMenuItemAllCaps">true</bool>
    <bool name="abc_config_allowActionMenuItemTextWithIcon">false</bool>
    <bool name="abc_config_showMenuShortcutsWhenKeyboardPresent">false</bool>
    <bool name="abc_split_action_bar_is_narrow">true</bool>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/refs.xml -->
    <eat-comment/>
    <bool name="combine_content">false</bool>
    <bool name="has_two_panes">false</bool>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/build/intermediates/exploded-aar/com.android.support/appcompat-v7/20.0.0/res/values/values.xml -->
    <eat-comment/>
    <color name="abc_search_url_text_normal">#7fa87f</color>
    <color name="abc_search_url_text_pressed">@android:color/black</color>
    <color name="abc_search_url_text_selected">@android:color/black</color>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/build/intermediates/exploded-aar/com.astuetz/pagerslidingtabstrip/1.0.1/res/values/values.xml -->
    <eat-comment/>
    <color name="background_tab_pressed">#6633B5E5</color>
    <declare-styleable name="ActionBar"><attr name="navigationMode"><enum name="normal" value="0"/><enum name="listMode" value="1"/><enum name="tabMode" value="2"/></attr><attr name="displayOptions"><flag name="useLogo" value="0x1"/><flag name="showHome" value="0x2"/><flag name="homeAsUp" value="0x4"/><flag name="showTitle" value="0x8"/><flag name="showCustom" value="0x10"/><flag name="disableHome" value="0x20"/></attr><attr name="title"/><attr format="string" name="subtitle"/><attr format="reference" name="titleTextStyle"/><attr format="reference" name="subtitleTextStyle"/><attr format="reference" name="icon"/><attr format="reference" name="logo"/><attr format="reference" name="divider"/><attr format="reference" name="background"/><attr format="reference|color" name="backgroundStacked"/><attr format="reference|color" name="backgroundSplit"/><attr format="reference" name="customNavigationLayout"/><attr name="height"/><attr format="reference" name="homeLayout"/><attr format="reference" name="progressBarStyle"/><attr format="reference" name="indeterminateProgressStyle"/><attr format="dimension" name="progressBarPadding"/><attr format="dimension" name="itemPadding"/></declare-styleable>
    <declare-styleable name="ActionBarLayout"><attr name="android:layout_gravity"/></declare-styleable>
    <declare-styleable name="ActionBarWindow"><attr format="boolean" name="windowActionBar"/><attr format="boolean" name="windowActionBarOverlay"/><attr format="boolean" name="windowSplitActionBar"/><attr format="dimension|fraction" name="windowFixedWidthMajor"/><attr format="dimension|fraction" name="windowFixedHeightMinor"/><attr format="dimension|fraction" name="windowFixedWidthMinor"/><attr format="dimension|fraction" name="windowFixedHeightMajor"/></declare-styleable>
    <declare-styleable name="ActionMenuItemView"><attr name="android:minWidth"/></declare-styleable>
    <declare-styleable name="ActionMenuView"/>
    <declare-styleable name="ActionMode"><attr name="titleTextStyle"/><attr name="subtitleTextStyle"/><attr name="background"/><attr name="backgroundSplit"/><attr name="height"/></declare-styleable>
    <declare-styleable name="ActivityChooserView"><attr format="string" name="initialActivityCount"/><attr format="reference" name="expandActivityOverflowButtonDrawable"/></declare-styleable>
    <declare-styleable name="CompatTextView"><attr format="reference|boolean" name="textAllCaps"/></declare-styleable>
    <declare-styleable name="LinearLayoutICS"><attr name="divider"/><attr name="showDividers"><flag name="none" value="0"/><flag name="beginning" value="1"/><flag name="middle" value="2"/><flag name="end" value="4"/></attr><attr format="dimension" name="dividerPadding"/></declare-styleable>
    <declare-styleable name="MenuGroup"><attr name="android:id"/><attr name="android:menuCategory"/><attr name="android:orderInCategory"/><attr name="android:checkableBehavior"/><attr name="android:visible"/><attr name="android:enabled"/></declare-styleable>
    <declare-styleable name="MenuItem"><attr name="android:id"/><attr name="android:menuCategory"/><attr name="android:orderInCategory"/><attr name="android:title"/><attr name="android:titleCondensed"/><attr name="android:icon"/><attr name="android:alphabeticShortcut"/><attr name="android:numericShortcut"/><attr name="android:checkable"/><attr name="android:checked"/><attr name="android:visible"/><attr name="android:enabled"/><attr name="android:onClick"/><attr name="showAsAction"><flag name="never" value="0"/><flag name="ifRoom" value="1"/><flag name="always" value="2"/><flag name="withText" value="4"/><flag name="collapseActionView" value="8"/></attr><attr format="reference" name="actionLayout"/><attr format="string" name="actionViewClass"/><attr format="string" name="actionProviderClass"/></declare-styleable>
    <declare-styleable name="MenuView"><attr name="android:itemTextAppearance"/><attr name="android:horizontalDivider"/><attr name="android:verticalDivider"/><attr name="android:headerBackground"/><attr name="android:itemBackground"/><attr name="android:windowAnimationStyle"/><attr name="android:itemIconDisabledAlpha"/><attr name="android:preserveIconSpacing"/></declare-styleable>
    <declare-styleable name="PagerSlidingTabStrip"><attr format="color" name="pstsIndicatorColor"/><attr format="color" name="pstsUnderlineColor"/><attr format="color" name="pstsDividerColor"/><attr format="dimension" name="pstsIndicatorHeight"/><attr format="dimension" name="pstsUnderlineHeight"/><attr format="dimension" name="pstsDividerPadding"/><attr format="dimension" name="pstsTabPaddingLeftRight"/><attr format="dimension" name="pstsScrollOffset"/><attr format="reference" name="pstsTabBackground"/><attr format="boolean" name="pstsShouldExpand"/><attr format="boolean" name="pstsTextAllCaps"/></declare-styleable>
    <declare-styleable name="SearchView"><attr format="boolean" name="iconifiedByDefault"/><attr name="android:maxWidth"/><attr format="string" name="queryHint"/><attr name="android:imeOptions"/><attr name="android:inputType"/></declare-styleable>
    <declare-styleable name="Spinner"><attr format="reference" name="prompt"/><attr format="enum" name="spinnerMode"><enum name="dialog" value="0"/><enum name="dropdown" value="1"/></attr><attr name="android:dropDownSelector"/><attr name="android:popupBackground"/><attr name="android:dropDownVerticalOffset"/><attr name="android:dropDownHorizontalOffset"/><attr name="android:dropDownWidth"/><attr format="reference" name="popupPromptView"/><attr name="android:gravity"/><attr format="boolean" name="disableChildrenWhenDisabled"/></declare-styleable>
    <declare-styleable name="Theme"><attr format="reference" name="actionDropDownStyle"/><attr format="dimension" name="dropdownListPreferredItemHeight"/><attr format="reference" name="popupMenuStyle"/><attr format="dimension" name="panelMenuListWidth"/><attr format="reference" name="panelMenuListTheme"/><attr format="reference" name="listChoiceBackgroundIndicator"/></declare-styleable>
    <declare-styleable name="View"><attr format="dimension" name="paddingStart"/><attr format="dimension" name="paddingEnd"/><attr name="android:focusable"/></declare-styleable>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/build/intermediates/exploded-aar/com.android.support/appcompat-v7/20.0.0/res/values/values.xml -->
    <eat-comment/>
    <dimen name="abc_action_bar_default_height">48dip</dimen>
    <dimen name="abc_action_bar_icon_vertical_padding">8dip</dimen>
    <dimen name="abc_action_bar_progress_bar_size">40dp</dimen>
    <dimen name="abc_action_bar_stacked_max_height">48dp</dimen>
    <dimen name="abc_action_bar_stacked_tab_max_width">180dp</dimen>
    <dimen name="abc_action_bar_subtitle_bottom_margin">5dip</dimen>
    <dimen name="abc_action_bar_subtitle_text_size">14dp</dimen>
    <dimen name="abc_action_bar_subtitle_top_margin">-3dp</dimen>
    <dimen name="abc_action_bar_title_text_size">18dp</dimen>
    <dimen name="abc_action_button_min_width">56dip</dimen>
    <dimen name="abc_config_prefDialogWidth">320dp</dimen>
    <dimen name="abc_dropdownitem_icon_width">32dip</dimen>
    <dimen name="abc_dropdownitem_text_padding_left">8dip</dimen>
    <dimen name="abc_dropdownitem_text_padding_right">8dip</dimen>
    <dimen name="abc_panel_menu_list_width">296dp</dimen>
    <dimen name="abc_search_view_preferred_width">320dip</dimen>
    <dimen name="abc_search_view_text_min_width">160dip</dimen>
    <item name="dialog_fixed_height_major" type="dimen">80%</item>
    <item name="dialog_fixed_height_minor" type="dimen">100%</item>
    <item name="dialog_fixed_width_major" type="dimen">320dp</item>
    <item name="dialog_fixed_width_minor" type="dimen">320dp</item>
    <item name="action_bar_activity_content" type="id"/>
    <item name="action_menu_divider" type="id"/>
    <item name="action_menu_presenter" type="id"/>
    <item name="home" type="id"/>
    <item name="progress_circular" type="id"/>
    <item name="progress_horizontal" type="id"/>
    <integer name="abc_max_action_buttons">2</integer>
    <string name="abc_action_bar_home_description">Navigate home</string>
    <string name="abc_action_bar_up_description">Navigate up</string>
    <string name="abc_action_menu_overflow_description">More options</string>
    <string name="abc_action_mode_done">Done</string>
    <string name="abc_activity_chooser_view_see_all">See all</string>
    <string name="abc_activitychooserview_choose_application">Choose an app</string>
    <string name="abc_searchview_description_clear">Clear query</string>
    <string name="abc_searchview_description_query">Search query</string>
    <string name="abc_searchview_description_search">Search</string>
    <string name="abc_searchview_description_submit">Submit query</string>
    <string name="abc_searchview_description_voice">Voice search</string>
    <string name="abc_shareactionprovider_share_with">Share with</string>
    <string name="abc_shareactionprovider_share_with_application">Share with %s</string>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/strings.xml -->
    <eat-comment/>
    <string name="about_kt">KING TeC is more than just a robotics team. We have been changing our
        culture for more than seven years by competing in world class robotics competitions while
        working together with our sponsors, school, community, and volunteers. By working with FIRST,
        the premiere robotics competition of its kind, KING TeC provides nearly unlimited technological
        opportunities to grow young minds within our community into the technology leaders of tomorrow.
        Find out more about KING TeC at www.kingtec2169.com.</string>
    <string name="about_name">About KING TeC</string>
    <string name="app_name">Survival Guide</string>
    <string name="contact_us_name">Contact Us</string>
    <string name="drawer_close">Close Drawer</string>
    <string name="drawer_open">Open Drawer</string>
    <string name="search_name">Search</string>
    <string name="settings_name">Preferences</string>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/build/intermediates/exploded-aar/com.android.support/appcompat-v7/20.0.0/res/values/values.xml -->
    <eat-comment/>
    <style name="TextAppearance.AppCompat.Base.CompactMenu.Dialog" parent="android:TextAppearance.Medium">
        <item name="android:textColor">@android:color/primary_text_light</item>
    </style>
    <style name="TextAppearance.AppCompat.Base.SearchResult" parent="">
        <item name="android:textStyle">normal</item>
        <item name="android:textColor">?android:textColorPrimary</item>
        <item name="android:textColorHint">?android:textColorHint</item>
    </style>
    <style name="TextAppearance.AppCompat.Base.SearchResult.Subtitle">
        <item name="android:textSize">14sp</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="TextAppearance.AppCompat.Base.SearchResult.Title">
        <item name="android:textSize">18sp</item>
    </style>
    <style name="TextAppearance.AppCompat.Base.Widget.PopupMenu.Large" parent="android:TextAppearance.Widget">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
        <item name="android:textSize">18sp</item>
    </style>
    <style name="TextAppearance.AppCompat.Base.Widget.PopupMenu.Small" parent="android:TextAppearance.Widget">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
        <item name="android:textSize">14sp</item>
    </style>
    <style name="TextAppearance.AppCompat.Light.Base.SearchResult" parent="TextAppearance.AppCompat.Base.SearchResult">
        <item name="android:textColor">?android:textColorPrimary</item>
        <item name="android:textColorHint">?android:textColorHint</item>
    </style>
    <style name="TextAppearance.AppCompat.Light.Base.SearchResult.Subtitle">
        <item name="android:textSize">14sp</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="TextAppearance.AppCompat.Light.Base.SearchResult.Title">
        <item name="android:textSize">18sp</item>
    </style>
    <style name="TextAppearance.AppCompat.Light.Base.Widget.PopupMenu.Large" parent="TextAppearance.AppCompat.Base.Widget.PopupMenu.Large"/>
    <style name="TextAppearance.AppCompat.Light.Base.Widget.PopupMenu.Small" parent="TextAppearance.AppCompat.Base.Widget.PopupMenu.Small"/>
    <style name="TextAppearance.AppCompat.Light.SearchResult.Subtitle" parent="TextAppearance.AppCompat.Light.Base.SearchResult.Subtitle"/>
    <style name="TextAppearance.AppCompat.Light.SearchResult.Title" parent="TextAppearance.AppCompat.Light.Base.SearchResult.Title"/>
    <style name="TextAppearance.AppCompat.Light.Widget.PopupMenu.Large" parent="TextAppearance.AppCompat.Light.Base.Widget.PopupMenu.Large"/>
    <style name="TextAppearance.AppCompat.Light.Widget.PopupMenu.Small" parent="TextAppearance.AppCompat.Light.Base.Widget.PopupMenu.Small"/>
    <style name="TextAppearance.AppCompat.SearchResult.Subtitle" parent="TextAppearance.AppCompat.Base.SearchResult.Subtitle"/>
    <style name="TextAppearance.AppCompat.SearchResult.Title" parent="TextAppearance.AppCompat.Base.SearchResult.Title"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Menu" parent="TextAppearance.AppCompat.Widget.Base.ActionBar.Menu"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Subtitle" parent="TextAppearance.AppCompat.Widget.Base.ActionBar.Subtitle"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse" parent="TextAppearance.AppCompat.Widget.Base.ActionBar.Subtitle.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Title" parent="TextAppearance.AppCompat.Widget.Base.ActionBar.Title"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse" parent="TextAppearance.AppCompat.Widget.Base.ActionBar.Title.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Subtitle" parent="TextAppearance.AppCompat.Widget.Base.ActionMode.Subtitle"/>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Subtitle.Inverse" parent="TextAppearance.AppCompat.Widget.Base.ActionMode.Subtitle.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Title" parent="TextAppearance.AppCompat.Widget.Base.ActionMode.Title"/>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Title.Inverse" parent="TextAppearance.AppCompat.Widget.Base.ActionMode.Title.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionBar.Menu" parent="android:TextAppearance.Small">
        <item name="android:textSize">12sp</item>
        <item name="android:textStyle">bold</item>
        <item name="android:textColor">?attr/actionMenuTextColor</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionBar.Subtitle" parent="android:TextAppearance.Small">
        <item name="android:textSize">@dimen/abc_action_bar_subtitle_text_size</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionBar.Subtitle.Inverse" parent="android:TextAppearance.Small.Inverse">
        <item name="android:textSize">@dimen/abc_action_bar_subtitle_text_size</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionBar.Title" parent="android:TextAppearance.Medium">
        <item name="android:textSize">@dimen/abc_action_bar_title_text_size</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionBar.Title.Inverse" parent="android:TextAppearance.Medium.Inverse">
        <item name="android:textSize">@dimen/abc_action_bar_title_text_size</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionMode.Subtitle" parent="android:TextAppearance.Small">
        <item name="android:textColor">?android:attr/textColorSecondary</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionMode.Subtitle.Inverse" parent="android:TextAppearance.Small.Inverse">
        <item name="android:textColor">?android:attr/textColorSecondaryInverse</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionMode.Title" parent="android:TextAppearance.Medium"/>
    <style name="TextAppearance.AppCompat.Widget.Base.ActionMode.Title.Inverse" parent="android:TextAppearance.Medium.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.Base.DropDownItem" parent="android:TextAppearance.Small">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
    </style>
    <style name="TextAppearance.AppCompat.Widget.DropDownItem" parent="TextAppearance.AppCompat.Widget.Base.DropDownItem"/>
    <style name="TextAppearance.AppCompat.Widget.PopupMenu.Large" parent="TextAppearance.AppCompat.Base.Widget.PopupMenu.Large"/>
    <style name="TextAppearance.AppCompat.Widget.PopupMenu.Small" parent="TextAppearance.AppCompat.Base.Widget.PopupMenu.Small"/>
    <style name="TextAppearance.Widget.AppCompat.Base.ExpandedMenu.Item" parent="android:TextAppearance.Medium">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
    </style>
    <style name="TextAppearance.Widget.AppCompat.ExpandedMenu.Item" parent="TextAppearance.Widget.AppCompat.Base.ExpandedMenu.Item"/>
    <style name="Theme.AppCompat" parent="Theme.Base.AppCompat">
        <item name="isLightTheme">false</item>

        <!-- Required for use of support_simple_spinner_dropdown_item.xml -->
        <item name="spinnerDropDownItemStyle">            @style/Widget.AppCompat.DropDownItem.Spinner</item>
        <item name="dropdownListPreferredItemHeight">?attr/listPreferredItemHeightSmall</item>
        <item name="searchResultListItemHeight">58dip</item>

        <!-- Popup Menu styles -->
        <item name="popupMenuStyle">@style/Widget.AppCompat.PopupMenu</item>
        <item name="textAppearanceLargePopupMenu">            @style/TextAppearance.AppCompat.Widget.PopupMenu.Large</item>
        <item name="textAppearanceSmallPopupMenu">            @style/TextAppearance.AppCompat.Widget.PopupMenu.Small</item>
        <item name="listPopupWindowStyle">@style/Widget.AppCompat.ListPopupWindow</item>
        <item name="dropDownListViewStyle">@style/Widget.AppCompat.ListView.DropDown</item>

        <!-- SearchView attributes -->
        <item name="searchDropdownBackground">@drawable/abc_search_dropdown_dark</item>
        <item name="searchViewTextField">@drawable/abc_textfield_searchview_holo_dark</item>
        <item name="searchViewTextFieldRight">@drawable/abc_textfield_searchview_right_holo_dark</item>
        <item name="searchViewCloseIcon">@drawable/abc_ic_clear</item>
        <item name="searchViewSearchIcon">@drawable/abc_ic_search</item>
        <item name="searchViewGoIcon">@drawable/abc_ic_go</item>
        <item name="searchViewVoiceIcon">@drawable/abc_ic_voice_search</item>
        <item name="searchViewEditQuery">@drawable/abc_ic_commit_search_api_holo_dark</item>
        <item name="searchViewEditQueryBackground">?attr/selectableItemBackground</item>
        <item name="searchViewAutoCompleteTextView">            @style/Widget.AppCompat.AutoCompleteTextView</item>
        <item name="textColorSearchUrl">@color/abc_search_url_text_holo</item>
        <item name="textAppearanceSearchResultTitle">            @style/TextAppearance.AppCompat.SearchResult.Title</item>
        <item name="textAppearanceSearchResultSubtitle">            @style/TextAppearance.AppCompat.SearchResult.Subtitle</item>
        <item name="actionModeShareDrawable">@drawable/abc_ic_menu_share_holo_dark</item>

        <!-- ShareActionProvider attributes -->
        <item name="activityChooserViewStyle">@style/Widget.AppCompat.ActivityChooserView</item>
    </style>
    <style name="Theme.AppCompat.Base.CompactMenu" parent="">
        <item name="android:itemTextAppearance">            @style/TextAppearance.Widget.AppCompat.ExpandedMenu.Item</item>
        <item name="android:listViewStyle">@style/Widget.AppCompat.ListView.Menu</item>
    </style>
    <style name="Theme.AppCompat.Base.CompactMenu.Dialog" parent="">
        <item name="android:itemTextAppearance">            @style/TextAppearance.AppCompat.Base.CompactMenu.Dialog</item>
        <item name="android:listViewStyle">@android:style/Widget.ListView.Menu</item>
    </style>
    <style name="Theme.AppCompat.CompactMenu" parent="Theme.AppCompat.Base.CompactMenu"/>
    <style name="Theme.AppCompat.CompactMenu.Dialog" parent="Theme.AppCompat.Base.CompactMenu.Dialog"/>
    <style name="Theme.AppCompat.DialogWhenLarge" parent="Theme.Base.AppCompat.DialogWhenLarge"/>
    <style name="Theme.AppCompat.Light" parent="Theme.Base.AppCompat.Light">
        <item name="isLightTheme">true</item>

        <!-- Required for use of support_simple_spinner_dropdown_item.xml -->
        <item name="spinnerDropDownItemStyle">            @style/Widget.AppCompat.Light.DropDownItem.Spinner</item>
        <item name="dropdownListPreferredItemHeight">?attr/listPreferredItemHeightSmall</item>
        <item name="searchResultListItemHeight">58dip</item>

        <!-- Popup Menu styles -->
        <item name="popupMenuStyle">@style/Widget.AppCompat.Light.PopupMenu</item>
        <item name="textAppearanceLargePopupMenu">            @style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Large</item>
        <item name="textAppearanceSmallPopupMenu">            @style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Small</item>
        <item name="listPopupWindowStyle">@style/Widget.AppCompat.Light.ListPopupWindow</item>
        <item name="dropDownListViewStyle">@style/Widget.AppCompat.Light.ListView.DropDown</item>

        <!-- SearchView attributes -->
        <item name="searchDropdownBackground">@drawable/abc_search_dropdown_light</item>
        <item name="searchViewTextField">@drawable/abc_textfield_searchview_holo_light</item>
        <item name="searchViewTextFieldRight">@drawable/abc_textfield_searchview_right_holo_light</item>
        <item name="searchViewCloseIcon">@drawable/abc_ic_clear_holo_light</item>
        <item name="searchViewSearchIcon">@drawable/abc_ic_search_api_holo_light</item>
        <item name="searchViewGoIcon">@drawable/abc_ic_go_search_api_holo_light</item>
        <item name="searchViewVoiceIcon">@drawable/abc_ic_voice_search_api_holo_light</item>
        <item name="searchViewEditQuery">@drawable/abc_ic_commit_search_api_holo_light</item>
        <item name="searchViewEditQueryBackground">?attr/selectableItemBackground</item>
        <item name="searchViewAutoCompleteTextView">            @style/Widget.AppCompat.Light.AutoCompleteTextView</item>
        <item name="textColorSearchUrl">@color/abc_search_url_text_holo</item>
        <item name="textAppearanceSearchResultTitle">            @style/TextAppearance.AppCompat.Light.SearchResult.Title</item>
        <item name="textAppearanceSearchResultSubtitle">            @style/TextAppearance.AppCompat.Light.SearchResult.Subtitle</item>
        <item name="actionModeShareDrawable">@drawable/abc_ic_menu_share_holo_light</item>

        <!-- ShareActionProvider attributes -->
        <item name="activityChooserViewStyle">@style/Widget.AppCompat.Light.ActivityChooserView</item>
    </style>
    <style name="Theme.AppCompat.Light.DarkActionBar" parent="Theme.Base.AppCompat.Light.DarkActionBar">
        <item name="isLightTheme">true</item>

        <!-- Required for use of support_simple_spinner_dropdown_item.xml -->
        <item name="spinnerDropDownItemStyle">            @style/Widget.AppCompat.Light.DropDownItem.Spinner</item>
        <item name="dropdownListPreferredItemHeight">?attr/listPreferredItemHeightSmall</item>
        <item name="searchResultListItemHeight">58dip</item>

        <!-- Popup Menu styles -->
        <item name="popupMenuStyle">@style/Widget.AppCompat.Light.PopupMenu</item>
        <item name="textAppearanceLargePopupMenu">            @style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Large</item>
        <item name="textAppearanceSmallPopupMenu">            @style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Small</item>
        <item name="listPopupWindowStyle">@style/Widget.AppCompat.ListPopupWindow</item>
        <item name="dropDownListViewStyle">@style/Widget.AppCompat.ListView.DropDown</item>

        <!-- SearchView attributes -->
        <item name="searchDropdownBackground">@drawable/abc_search_dropdown_dark</item>
        <item name="searchViewTextField">@drawable/abc_textfield_searchview_holo_dark</item>
        <item name="searchViewTextFieldRight">@drawable/abc_textfield_searchview_right_holo_dark</item>
        <item name="searchViewCloseIcon">@drawable/abc_ic_clear</item>
        <item name="searchViewSearchIcon">@drawable/abc_ic_search</item>
        <item name="searchViewGoIcon">@drawable/abc_ic_go</item>
        <item name="searchViewVoiceIcon">@drawable/abc_ic_voice_search</item>
        <item name="searchViewEditQuery">@drawable/abc_ic_commit_search_api_holo_dark</item>
        <item name="searchViewEditQueryBackground">?attr/selectableItemBackground</item>
        <item name="searchViewAutoCompleteTextView">            @style/Widget.AppCompat.AutoCompleteTextView</item>
        <item name="textColorSearchUrl">@color/abc_search_url_text_holo</item>
        <item name="textAppearanceSearchResultTitle">            @style/TextAppearance.AppCompat.SearchResult.Title</item>
        <item name="textAppearanceSearchResultSubtitle">            @style/TextAppearance.AppCompat.SearchResult.Subtitle</item>
        <item name="actionModeShareDrawable">@drawable/abc_ic_menu_share_holo_dark</item>

        <!-- ShareActionProvider attributes -->
        <item name="activityChooserViewStyle">@style/Widget.AppCompat.ActivityChooserView</item>
    </style>
    <style name="Theme.AppCompat.Light.DialogWhenLarge" parent="Theme.Base.AppCompat.Light.DialogWhenLarge"/>
    <style name="Theme.Base" parent="android:Theme"/>
    <style name="Theme.Base.AppCompat" parent="Theme.Base">
        <item name="windowActionBar">true</item>
        <!-- Remove system title bars; we will add the action bar ourselves. -->
        <item name="android:windowNoTitle">true</item>
        <item name="buttonBarStyle">@android:style/ButtonBar</item>
        <item name="buttonBarButtonStyle">@android:style/Widget.Button</item>
        <item name="selectableItemBackground">@drawable/abc_item_background_holo_dark</item>
        <item name="homeAsUpIndicator">@drawable/abc_ic_ab_back_holo_dark</item>
        <item name="dividerVertical">@drawable/abc_list_divider_holo_dark</item>
        <item name="dividerHorizontal">@drawable/abc_list_divider_holo_dark</item>
        <item name="listPreferredItemHeight">?android:attr/listPreferredItemHeight</item>
        <item name="listPreferredItemHeightSmall">48dp</item>
        <item name="listPreferredItemHeightLarge">80dp</item>
        <item name="listPreferredItemPaddingLeft">8dip</item>
        <item name="listPreferredItemPaddingRight">8dip</item>
        <item name="textAppearanceListItem">?android:attr/textAppearanceMedium</item>
        <item name="textAppearanceListItemSmall">?android:attr/textAppearanceMedium</item>
        <item name="actionBarTabStyle">@style/Widget.AppCompat.ActionBar.TabView</item>
        <item name="actionBarTabBarStyle">@style/Widget.AppCompat.ActionBar.TabBar</item>
        <item name="actionBarTabTextStyle">@style/Widget.AppCompat.ActionBar.TabText</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>
        <item name="actionBarStyle">@style/Widget.AppCompat.ActionBar</item>
        <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
        <item name="actionBarWidgetTheme">@null</item>
        <item name="actionBarSize">@dimen/abc_action_bar_default_height</item>
        <item name="actionBarDivider">?attr/dividerVertical</item>
        <item name="actionBarItemBackground">?attr/selectableItemBackground</item>
        <item name="actionMenuTextAppearance">            @style/TextAppearance.AppCompat.Widget.ActionBar.Menu</item>
        <item name="actionMenuTextColor">?android:attr/textColorPrimaryDisableOnly</item>

        <!-- Dropdown Spinner Attributes -->
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Spinner.DropDown.ActionBar</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.ActionMode</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_holo_dark</item>
        <item name="actionModeSplitBackground">@drawable/abc_cab_background_bottom_holo_dark</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_cab_done_holo_dark</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.ActionButton.CloseMode</item>

        <!-- Panel attributes -->
        <item name="panelMenuListWidth">@dimen/abc_panel_menu_list_width</item>
        <item name="panelMenuListTheme">@style/Theme.AppCompat.CompactMenu</item>
        <item name="android:panelBackground">@drawable/abc_menu_hardkey_panel_holo_dark</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_dark</item>
    </style>
    <style name="Theme.Base.AppCompat.Dialog.FixedSize" parent="android:Theme.Dialog">
        <item name="windowFixedWidthMajor">@dimen/dialog_fixed_width_major</item>
        <item name="windowFixedWidthMinor">@dimen/dialog_fixed_width_minor</item>
        <item name="windowFixedHeightMajor">@dimen/dialog_fixed_height_major</item>
        <item name="windowFixedHeightMinor">@dimen/dialog_fixed_height_minor</item>
        <item name="windowActionBar">true</item>
        <!-- Remove system title bars; we will add the action bar ourselves. -->
        <item name="android:windowNoTitle">true</item>
        <item name="buttonBarStyle">@android:style/ButtonBar</item>
        <item name="buttonBarButtonStyle">@android:style/Widget.Button</item>
        <item name="selectableItemBackground">@drawable/abc_item_background_holo_dark</item>
        <item name="dividerVertical">@drawable/abc_list_divider_holo_dark</item>
        <item name="dividerHorizontal">@drawable/abc_list_divider_holo_dark</item>
        <item name="listPreferredItemHeight">?android:attr/listPreferredItemHeight</item>
        <item name="listPreferredItemHeightSmall">48dp</item>
        <item name="listPreferredItemHeightLarge">80dp</item>
        <item name="listPreferredItemPaddingLeft">8dip</item>
        <item name="listPreferredItemPaddingRight">8dip</item>
        <item name="textAppearanceListItem">?android:attr/textAppearanceMedium</item>
        <item name="textAppearanceListItemSmall">?android:attr/textAppearanceMedium</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.ActionMode</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_holo_dark</item>
        <item name="actionModeSplitBackground">@drawable/abc_cab_background_bottom_holo_dark</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_cab_done_holo_dark</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.ActionButton.CloseMode</item>

        <!-- Panel attributes -->
        <item name="panelMenuListWidth">@dimen/abc_panel_menu_list_width</item>
        <item name="panelMenuListTheme">@style/Theme.AppCompat.CompactMenu</item>
        <item name="android:panelBackground">@drawable/abc_menu_hardkey_panel_holo_dark</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_dark</item>
    </style>
    <style name="Theme.Base.AppCompat.Dialog.Light.FixedSize" parent="Theme.Base.AppCompat.Dialog.FixedSize"/>
    <style name="Theme.Base.AppCompat.DialogWhenLarge" parent="Theme.Base.AppCompat"/>
    <style name="Theme.Base.AppCompat.Light" parent="Theme.Base.Light">
        <item name="windowActionBar">true</item>
        <!-- Remove system title bars; we will add the action bar ourselves. -->
        <item name="android:windowNoTitle">true</item>
        <item name="buttonBarStyle">@android:style/ButtonBar</item>
        <item name="buttonBarButtonStyle">@android:style/Widget.Button</item>
        <item name="selectableItemBackground">@drawable/abc_item_background_holo_light</item>
        <item name="homeAsUpIndicator">@drawable/abc_ic_ab_back_holo_light</item>
        <item name="dividerVertical">@drawable/abc_list_divider_holo_light</item>
        <item name="dividerHorizontal">@drawable/abc_list_divider_holo_light</item>
        <item name="listPreferredItemHeight">?android:attr/listPreferredItemHeight</item>
        <item name="listPreferredItemHeightSmall">48dp</item>
        <item name="listPreferredItemHeightLarge">80dp</item>
        <item name="listPreferredItemPaddingLeft">8dip</item>
        <item name="listPreferredItemPaddingRight">8dip</item>
        <item name="textAppearanceListItem">?android:attr/textAppearanceMedium</item>
        <item name="textAppearanceListItemSmall">?android:attr/textAppearanceMedium</item>

        <!-- Action Bar Styles -->
        <item name="actionBarTabStyle">@style/Widget.AppCompat.Light.ActionBar.TabView</item>
        <item name="actionBarTabBarStyle">@style/Widget.AppCompat.Light.ActionBar.TabBar</item>
        <item name="actionBarTabTextStyle">@style/Widget.AppCompat.Light.ActionBar.TabText</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.Light.ActionButton</item>
        <item name="actionOverflowButtonStyle">            @style/Widget.AppCompat.Light.ActionButton.Overflow</item>
        <item name="actionBarStyle">@style/Widget.AppCompat.Light.ActionBar</item>
        <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
        <item name="actionBarWidgetTheme">@null</item>
        <item name="actionBarSize">@dimen/abc_action_bar_default_height</item>
        <item name="actionBarDivider">?attr/dividerVertical</item>
        <item name="actionBarItemBackground">?attr/selectableItemBackground</item>
        <item name="actionMenuTextAppearance">            @style/TextAppearance.AppCompat.Widget.ActionBar.Menu</item>
        <item name="actionMenuTextColor">?android:attr/textColorPrimaryDisableOnly</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.ActionMode</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_holo_light</item>
        <item name="actionModeSplitBackground">@drawable/abc_cab_background_bottom_holo_light</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_cab_done_holo_light</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.Light.ActionButton.CloseMode</item>

        <!-- Dropdown Spinner Attributes -->
        <item name="actionDropDownStyle">            @style/Widget.AppCompat.Light.Spinner.DropDown.ActionBar</item>

        <!-- Panel attributes -->
        <item name="panelMenuListWidth">@dimen/abc_panel_menu_list_width</item>
        <item name="panelMenuListTheme">@style/Theme.AppCompat.CompactMenu</item>
        <item name="android:panelBackground">@drawable/abc_menu_hardkey_panel_holo_light</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_light</item>
    </style>
    <style name="Theme.Base.AppCompat.Light.DarkActionBar" parent="Theme.Base.AppCompat.Light">
        <item name="homeAsUpIndicator">@drawable/abc_ic_ab_back_holo_dark</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>
        <item name="actionBarStyle">@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse</item>
        <item name="actionBarWidgetTheme">@style/Theme.AppCompat</item>
        <item name="actionBarDivider">@drawable/abc_list_divider_holo_dark</item>
        <item name="actionBarItemBackground">@drawable/abc_item_background_holo_dark</item>
        <item name="actionBarTabStyle">@style/Widget.AppCompat.Light.ActionBar.TabView.Inverse</item>
        <item name="actionBarTabBarStyle">@style/Widget.AppCompat.Light.ActionBar.TabBar.Inverse</item>
        <item name="actionBarTabTextStyle">@style/Widget.AppCompat.Light.ActionBar.TabText.Inverse</item>
        <item name="actionMenuTextColor">?android:attr/textColorPrimaryInverseDisableOnly</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.Light.ActionMode.Inverse</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_holo_dark</item>
        <item name="actionModeSplitBackground">@drawable/abc_cab_background_bottom_holo_dark</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_cab_done_holo_dark</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.ActionButton.CloseMode</item>

        <!-- Dropdown Spinner Attributes -->
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Spinner.DropDown.ActionBar</item>

        <!-- Panel attributes -->
        <item name="android:panelBackground">@drawable/abc_menu_hardkey_panel_holo_dark</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_dark</item>
    </style>
    <style name="Theme.Base.AppCompat.Light.DialogWhenLarge" parent="Theme.Base.AppCompat.Light"/>
    <style name="Theme.Base.Light" parent="android:Theme.Light"/>
    <style name="Widget.AppCompat.ActionBar" parent="Widget.AppCompat.Base.ActionBar"/>
    <style name="Widget.AppCompat.ActionBar.Solid" parent="Widget.AppCompat.Base.ActionBar.Solid"/>
    <style name="Widget.AppCompat.ActionBar.TabBar" parent="Widget.AppCompat.Base.ActionBar.TabBar"/>
    <style name="Widget.AppCompat.ActionBar.TabText" parent="Widget.AppCompat.Base.ActionBar.TabText"/>
    <style name="Widget.AppCompat.ActionBar.TabView" parent="Widget.AppCompat.Base.ActionBar.TabView"/>
    <style name="Widget.AppCompat.ActionButton" parent="Widget.AppCompat.Base.ActionButton"/>
    <style name="Widget.AppCompat.ActionButton.CloseMode" parent="Widget.AppCompat.Base.ActionButton.CloseMode"/>
    <style name="Widget.AppCompat.ActionButton.Overflow" parent="Widget.AppCompat.Base.ActionButton.Overflow"/>
    <style name="Widget.AppCompat.ActionMode" parent="Widget.AppCompat.Base.ActionMode"/>
    <style name="Widget.AppCompat.ActivityChooserView" parent="Widget.AppCompat.Base.ActivityChooserView"/>
    <style name="Widget.AppCompat.AutoCompleteTextView" parent="Widget.AppCompat.Base.AutoCompleteTextView"/>
    <style name="Widget.AppCompat.Base.ActionBar" parent="">
        <item name="displayOptions">useLogo|showHome|showTitle</item>
        <item name="divider">?attr/dividerVertical</item>
        <item name="height">?attr/actionBarSize</item>
        <item name="homeLayout">@layout/abc_action_bar_home</item>
        <item name="titleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionBar.Title</item>
        <item name="subtitleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionBar.Subtitle</item>
        <item name="background">@drawable/abc_ab_transparent_dark_holo</item>
        <item name="backgroundStacked">@drawable/abc_ab_stacked_transparent_dark_holo</item>
        <item name="backgroundSplit">@drawable/abc_ab_bottom_transparent_dark_holo</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>
        <item name="progressBarStyle">@style/Widget.AppCompat.ProgressBar.Horizontal</item>
        <item name="indeterminateProgressStyle">@style/Widget.AppCompat.ProgressBar</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionBar.Solid" parent="Widget.AppCompat.Base.ActionBar">
        <item name="background">@drawable/abc_ab_solid_dark_holo</item>
        <item name="backgroundStacked">@drawable/abc_ab_stacked_solid_dark_holo</item>
        <item name="backgroundSplit">@drawable/abc_ab_bottom_solid_dark_holo</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionBar.TabBar" parent="">
        <item name="divider">?attr/actionBarDivider</item>
        <item name="showDividers">middle</item>
        <item name="dividerPadding">12dip</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionBar.TabText" parent="">
        <item name="android:textAppearance">@null</item>
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
        <item name="android:textSize">12sp</item>
        <item name="android:textStyle">bold</item>
        <item name="android:ellipsize">marquee</item>
        <item name="android:maxLines">2</item>
        <item name="textAllCaps">true</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionBar.TabView" parent="">
        <item name="android:background">@drawable/abc_tab_indicator_ab_holo</item>
        <item name="android:gravity">center_horizontal</item>
        <item name="android:paddingLeft">16dip</item>
        <item name="android:paddingRight">16dip</item>
        <item name="android:minWidth">80dip</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionButton" parent="">
        <item name="android:background">?attr/actionBarItemBackground</item>
        <item name="android:paddingLeft">12dip</item>
        <item name="android:paddingRight">12dip</item>
        <item name="android:minWidth">@dimen/abc_action_button_min_width</item>
        <item name="android:minHeight">?attr/actionBarSize</item>
        <item name="android:gravity">center</item>
        <item name="android:maxLines">2</item>
        <item name="textAllCaps">@bool/abc_config_actionMenuItemAllCaps</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionButton.CloseMode" parent="Widget.AppCompat.Base.ActionButton"/>
    <style name="Widget.AppCompat.Base.ActionButton.Overflow" parent="Widget.AppCompat.Base.ActionButton">
        <item name="android:src">@drawable/abc_ic_menu_moreoverflow_normal_holo_dark</item>
    </style>
    <style name="Widget.AppCompat.Base.ActionMode" parent="">
        <item name="background">?attr/actionModeBackground</item>
        <item name="backgroundSplit">?attr/actionModeSplitBackground</item>
        <item name="height">?attr/actionBarSize</item>
        <item name="titleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionMode.Title</item>
        <item name="subtitleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionMode.Subtitle</item>
    </style>
    <style name="Widget.AppCompat.Base.ActivityChooserView" parent="">
        <item name="android:gravity">center</item>
        <item name="android:background">@drawable/abc_ab_share_pack_holo_dark</item>
        <item name="divider">?attr/dividerVertical</item>
        <item name="showDividers">middle</item>
        <item name="dividerPadding">6dip</item>
    </style>
    <style name="Widget.AppCompat.Base.AutoCompleteTextView" parent="android:Widget.AutoCompleteTextView">
        <item name="android:textColor">?attr/actionMenuTextColor</item>
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_dark</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_dark</item>
    </style>
    <style name="Widget.AppCompat.Base.DropDownItem.Spinner" parent="">
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Widget.DropDownItem</item>
        <item name="android:paddingLeft">8dp</item>
        <item name="android:paddingRight">8dp</item>
        <item name="android:gravity">center_vertical</item>
    </style>
    <style name="Widget.AppCompat.Base.ListPopupWindow" parent="">
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_dark</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_dark</item>
        <item name="android:dropDownVerticalOffset">0dip</item>
        <item name="android:dropDownHorizontalOffset">0dip</item>
        <item name="android:dropDownWidth">wrap_content</item>
    </style>
    <style name="Widget.AppCompat.Base.ListView.DropDown" parent="android:Widget.ListView">
        <item name="android:listSelector">@drawable/abc_list_selector_holo_dark</item>
    </style>
    <style name="Widget.AppCompat.Base.ListView.Menu" parent="android:Widget.ListView.Menu">
        <item name="android:listSelector">?attr/listChoiceBackgroundIndicator</item>
        <item name="android:divider">?attr/dividerHorizontal</item>
    </style>
    <style name="Widget.AppCompat.Base.PopupMenu" parent="@style/Widget.AppCompat.Base.ListPopupWindow"/>
    <style name="Widget.AppCompat.Base.ProgressBar" parent="android:Widget.ProgressBar">
        <item name="android:minWidth">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:maxWidth">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:minHeight">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:maxHeight">@dimen/abc_action_bar_progress_bar_size</item>
    </style>
    <style name="Widget.AppCompat.Base.ProgressBar.Horizontal" parent="android:Widget.ProgressBar.Horizontal"/>
    <style name="Widget.AppCompat.Base.Spinner" parent="">
        <item name="spinnerMode">dropdown</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_dark</item>
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_dark</item>
        <item name="android:dropDownVerticalOffset">0dip</item>
        <item name="android:dropDownHorizontalOffset">0dip</item>
        <item name="android:dropDownWidth">wrap_content</item>
        <item name="android:gravity">left|center_vertical</item>
        <item name="android:clickable">true</item>
        <item name="android:background">@drawable/abc_spinner_ab_holo_dark</item>
    </style>
    <style name="Widget.AppCompat.DropDownItem.Spinner" parent="Widget.AppCompat.Base.DropDownItem.Spinner"/>
    <style name="Widget.AppCompat.Light.ActionBar" parent="Widget.AppCompat.Light.Base.ActionBar"/>
    <style name="Widget.AppCompat.Light.ActionBar.Solid" parent="Widget.AppCompat.Light.Base.ActionBar.Solid"/>
    <style name="Widget.AppCompat.Light.ActionBar.Solid.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.Solid.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabBar" parent="Widget.AppCompat.Light.Base.ActionBar.TabBar"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabBar.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabBar.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabText" parent="Widget.AppCompat.Light.Base.ActionBar.TabText"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabText.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabText.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabView" parent="Widget.AppCompat.Light.Base.ActionBar.TabView"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabView.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabView.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionButton" parent="Widget.AppCompat.Light.Base.ActionButton"/>
    <style name="Widget.AppCompat.Light.ActionButton.CloseMode" parent="Widget.AppCompat.Light.Base.ActionButton.CloseMode"/>
    <style name="Widget.AppCompat.Light.ActionButton.Overflow" parent="Widget.AppCompat.Light.Base.ActionButton.Overflow"/>
    <style name="Widget.AppCompat.Light.ActionMode.Inverse" parent="Widget.AppCompat.Light.Base.ActionMode.Inverse"/>
    <style name="Widget.AppCompat.Light.ActivityChooserView" parent="Widget.AppCompat.Light.Base.ActivityChooserView"/>
    <style name="Widget.AppCompat.Light.AutoCompleteTextView" parent="Widget.AppCompat.Light.Base.AutoCompleteTextView"/>
    <style name="Widget.AppCompat.Light.Base.ActionBar" parent="Widget.AppCompat.Base.ActionBar">
        <item name="background">@drawable/abc_ab_transparent_light_holo</item>
        <item name="backgroundStacked">@drawable/abc_ab_stacked_transparent_light_holo</item>
        <item name="backgroundSplit">@drawable/abc_ab_bottom_transparent_light_holo</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.Light.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.Light.ActionButton.Overflow</item>
        <item name="progressBarStyle">@style/Widget.AppCompat.ProgressBar.Horizontal</item>
        <item name="indeterminateProgressStyle">@style/Widget.AppCompat.ProgressBar</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActionBar.Solid" parent="Widget.AppCompat.Light.Base.ActionBar">
        <item name="background">@drawable/abc_ab_solid_light_holo</item>
        <item name="backgroundStacked">@drawable/abc_ab_stacked_solid_light_holo</item>
        <item name="backgroundSplit">@drawable/abc_ab_bottom_solid_light_holo</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActionBar.Solid.Inverse" parent="Widget.AppCompat.Base.ActionBar.Solid">
        <item name="titleTextStyle">            @style/TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse</item>
        <item name="subtitleTextStyle">            @style/TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabBar" parent="Widget.AppCompat.Base.ActionBar.TabBar"/>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabBar.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabBar"/>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabText" parent="Widget.AppCompat.Base.ActionBar.TabText"/>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabText.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabText">
        <item name="android:textColor">?android:attr/textColorPrimaryInverseDisableOnly</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabView" parent="Widget.AppCompat.Base.ActionBar.TabView"/>
    <style name="Widget.AppCompat.Light.Base.ActionBar.TabView.Inverse" parent="Widget.AppCompat.Light.Base.ActionBar.TabView"/>
    <style name="Widget.AppCompat.Light.Base.ActionButton" parent="Widget.AppCompat.Base.ActionButton"/>
    <style name="Widget.AppCompat.Light.Base.ActionButton.CloseMode" parent="Widget.AppCompat.Light.Base.ActionButton"/>
    <style name="Widget.AppCompat.Light.Base.ActionButton.Overflow" parent="Widget.AppCompat.Light.Base.ActionButton">
        <item name="android:src">@drawable/abc_ic_menu_moreoverflow_normal_holo_light</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActionMode.Inverse" parent="Widget.AppCompat.Base.ActionMode">
        <item name="titleTextStyle">            @style/TextAppearance.AppCompat.Widget.ActionMode.Title.Inverse</item>
        <item name="subtitleTextStyle">            @style/TextAppearance.AppCompat.Widget.ActionMode.Subtitle.Inverse</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ActivityChooserView" parent="Widget.AppCompat.Base.ActivityChooserView">
        <item name="android:background">@drawable/abc_ab_share_pack_holo_light</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.AutoCompleteTextView" parent="android:Widget.AutoCompleteTextView">
        <item name="android:textColor">?attr/actionMenuTextColor</item>
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_light</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_light</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.DropDownItem.Spinner" parent="Widget.AppCompat.Base.DropDownItem.Spinner"/>
    <style name="Widget.AppCompat.Light.Base.ListPopupWindow" parent="">
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_light</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_light</item>
        <item name="android:dropDownVerticalOffset">0dip</item>
        <item name="android:dropDownHorizontalOffset">0dip</item>
        <item name="android:dropDownWidth">wrap_content</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.ListView.DropDown" parent="android:Widget.ListView">
        <item name="android:listSelector">@drawable/abc_list_selector_holo_light</item>
    </style>
    <style name="Widget.AppCompat.Light.Base.PopupMenu" parent="@style/Widget.AppCompat.Light.Base.ListPopupWindow"/>
    <style name="Widget.AppCompat.Light.Base.Spinner" parent="Widget.AppCompat.Base.Spinner">
        <item name="android:dropDownSelector">@drawable/abc_list_selector_holo_light</item>
        <item name="android:popupBackground">@drawable/abc_menu_dropdown_panel_holo_light</item>
        <item name="android:background">@drawable/abc_spinner_ab_holo_light</item>
    </style>
    <style name="Widget.AppCompat.Light.DropDownItem.Spinner" parent="Widget.AppCompat.Light.Base.DropDownItem.Spinner"/>
    <style name="Widget.AppCompat.Light.ListPopupWindow" parent="Widget.AppCompat.Light.Base.ListPopupWindow"/>
    <style name="Widget.AppCompat.Light.ListView.DropDown" parent="Widget.AppCompat.Light.Base.ListView.DropDown"/>
    <style name="Widget.AppCompat.Light.PopupMenu" parent="Widget.AppCompat.Light.Base.PopupMenu"/>
    <style name="Widget.AppCompat.Light.Spinner.DropDown.ActionBar" parent="Widget.AppCompat.Light.Base.Spinner"/>
    <style name="Widget.AppCompat.ListPopupWindow" parent="Widget.AppCompat.Base.ListPopupWindow"/>
    <style name="Widget.AppCompat.ListView.DropDown" parent="Widget.AppCompat.Base.ListView.DropDown"/>
    <style name="Widget.AppCompat.ListView.Menu" parent="Widget.AppCompat.Base.ListView.Menu"/>
    <style name="Widget.AppCompat.PopupMenu" parent="Widget.AppCompat.Base.PopupMenu"/>
    <style name="Widget.AppCompat.ProgressBar" parent="Widget.AppCompat.Base.ProgressBar"/>
    <style name="Widget.AppCompat.ProgressBar.Horizontal" parent="Widget.AppCompat.Base.ProgressBar.Horizontal"/>
    <style name="Widget.AppCompat.Spinner.DropDown.ActionBar" parent="Widget.AppCompat.Base.Spinner"/>
    <!-- From: file:/C:/Users/Matth/Documents/kingtec-survival-guide-7b970b282d47/TestApp/src/main/res/values/styles.xml -->
    <eat-comment/>
    <style name="splashScreenTheme" parent="@android:style/Theme.DeviceDefault.Light.NoActionBar">
        <item name="android:windowBackground">@drawable/ic_kt</item>
    </style>
</resources>